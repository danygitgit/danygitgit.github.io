<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>JS之大循环</title>
      <link href="/2019/07/19/js-zhi-da-xun-huan/"/>
      <url>/2019/07/19/js-zhi-da-xun-huan/</url>
      
        <content type="html"><![CDATA[<p>@<a href="https://github.com/danygitgit/document-library/blob/master/JavaScript-library/JavaScript/JS%E4%B9%8B%E5%A4%A7%E5%BE%AA%E7%8E%AF.md" target="_blank" rel="noopener">JS之大循环</a>  </p><blockquote><p>create by <strong>db</strong> on <strong>2019-5-13 09:45:24</strong><br>Recently revised in <strong>2019-5-14 14:47:50</strong>  </p></blockquote><p>&emsp;<strong>Hello 小伙伴们，如果觉得本文还不错，麻烦点个赞或者给个 star，你们的赞和 star 是我前进的动力！<a href="https://github.com/danygitgit/document-library/blob/master/JavaScript-library/JavaScript/JS%E4%B9%8B%E5%A4%A7%E5%BE%AA%E7%8E%AF.md" target="_blank" rel="noopener">GitHub 地址</a></strong>  </p><p>&emsp;查阅网上诸多资料，并结合自己的学习经验，写下这篇学习笔记，以记录自己的学习心得。现分享给大家，以供参考。  </p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p>I hear and I fogorget.  </p></blockquote><blockquote><p>I see and I remember.  </p></blockquote><blockquote><p>I do and I understand.  </p></blockquote><p>&emsp;如果您希望一遍又一遍地运行相同的代码，并且每次的值都不同，那么使用循环是很方便的。</p><p>&emsp;参考文献：  </p><ul><li><a href="https://www.cnblogs.com/baiyunke/p/7821299.html" target="_blank" rel="noopener">JS中的循环—最全的循环总结 | 博客园-baiyunke </a>  </li><li><a href="http://www.codeceo.com/article/javascript-for-loop.html" target="_blank" rel="noopener">深入了解 JavaScript 中的 for 循环 | 码农网-编译青春 </a>  </li><li><a href="https://blog.csdn.net/qq_41899174/article/details/82797089" target="_blank" rel="noopener">js的15种循环遍历，你掌握了几种？ | CSDN-诗人与黑客 </a>  </li><li><a href="https://shimo.im/doc/VXqv2bxTlOUiJJqO/" target="_blank" rel="noopener">你还在用for循环大法麽？ | 石墨文档 </a>  </li><li><a href="https://www.liaoxuefeng.com/wiki/1022910821149312/1023023924160384" target="_blank" rel="noopener">廖雪峰的官方网站 | 廖雪峰 </a>  </li></ul><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p>在讲循环的之前，我们先了解一下循环结构的执行步骤：  </p><ol><li>声明循环变量；  </li><li>判断循环条件;  </li><li>执行循环体操作；  </li><li>更新循环变量；  </li><li>然后循环执行2-4，直到条件不成立，跳出循环。  </li></ol><h2 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h2><pre class=" language-javaScript"><code class="language-javaScript">let num = 1;  while (num<=10){//2、判断循环条件;    console.log(num);//3、执行循环体操作；    num++;//4、更新循环变量；  }  </code></pre><p><strong>注：</strong>  </p><p>while循环()中的表达式，运算结果可以是各种类型，但是最终都会转为真假，转换规则如下。  </p><ul><li><strong>Boolean</strong>：true为真，false为假；  </li><li><strong>String</strong>：空字符串为假，所有非空字符串为真；  </li><li><strong>Number</strong>：0为假，一切非0数字为真；  </li><li><strong>null/Undefined/NaN</strong>:全为假；  </li><li><strong>Object</strong>：全为真。  </li></ul><h2 id="do-while循环"><a href="#do-while循环" class="headerlink" title="do-while循环"></a>do-while循环</h2><pre class=" language-javaScript"><code class="language-javaScript">let num = 10;  do{    console.log(num);//10 9 8 7 6 5 4 3 2 1 0    num--;    }while(num>=0);  console.log(num);//-1  </code></pre><p><strong>注：</strong>  </p><ul><li><p>while循环特点：先判断后执行；  </p></li><li><p>do-while循环特点：先执行再判断，即使初始条件不成立，do-while循环至少执行一次；  </p></li></ul><h2 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h2><p><strong>for循环</strong>  </p><ul><li>&nbsp;for有三个表达式：  <ul><li>①声明循环变量；  </li><li>②判断循环条件；  </li><li>③更新循环变量；<br>&nbsp;&nbsp;三个表达式之间，用<code>;</code>分割，for循环三个表达式都可以省略，但是两个<code>;</code>缺一不可。  </li></ul></li><li>for循环的执行特点：先判断再执行，与while相同  </li><li>for循环三个表达式都可以有多部分组成，第二部分多个判断条件用<code>&amp;&amp; ||</code>连接，第一三部分用<code>,</code>分割；  </li></ul><p>下面先来看看大家最常见的一种写法：  </p><pre class=" language-javaScript"><code class="language-javaScript">const arr = [1, 2, 3];  for(let i = 0; i　< arr.length; i++) {    console.log(arr[i]);  }  </code></pre><p>当数组长度在循环过程中不会改变时，我们应将数组长度用变量存储起来，这样会获得更好的效率，下面是改进的写法：  </p><pre class=" language-javaScript"><code class="language-javaScript">const arr = [1, 2, 3];  for(let i = 0, len = arr.length; i < len; i++) {    console.log(arr[i]);  }  </code></pre><p>for循环的3个条件都是可以省略的，如果没有退出循环的判断条件，就必须使用break语句退出循环，否则就是死循环：  </p><pre class=" language-javaScript"><code class="language-javaScript">let x = 0;  for (;;) { // 将无限循环下去    if (x > 100) {      break; // 通过if判断来退出循环    }    x ++;  }  </code></pre><h2 id="for-in循环"><a href="#for-in循环" class="headerlink" title="for-in循环"></a>for-in循环</h2><p>for-in 循环主要用于遍历对象  </p><ul><li>for-in()中的格式：<code>for(keys in zhangsan){}</code>  </li><li><code>keys</code>表示obj对象的每一个键值对的键！！所有循环中，需要使用<code>obj[keys]</code>来取到每一个值！！！  </li><li>for-in 循环，遍历时不仅能读取对象自身上面的成员属性，也能延续原型链遍历出对象的原型属性  </li></ul><p>所以，可以使用<code>hasOwnProperty</code>判断一个属性是不是对象自身上的属性。  </p><ul><li><code>obj.hasOwnProperty(keys)==true</code> 表示这个属性是对象的成员属性，而不是原先属性  </li></ul><h3 id="for-in的真相"><a href="#for-in的真相" class="headerlink" title="for-in的真相"></a>for-in的真相</h3><p>for-in 循环遍历的是对象的属性，而不是数组的索引。因此， for-in 遍历的对象便不局限于数组，还可以遍历对象。例子如下：  </p><pre class=" language-javaScript"><code class="language-javaScript">const person = {    fname: "san",    lname: "zhang",    age: 99  };  let info;  for(info in person) {    console.log("person[" + info + "] = " + person[info]);  }  </code></pre><p>结果如下：  </p><pre class=" language-javaScript"><code class="language-javaScript">person[fname] = san  person[lname] = zhang  person[age] = 99  </code></pre><p>需要注意的是， for-in 遍历属性的顺序并不确定，即输出的结果顺序与属性在对象中的顺序无关，也与属性的字母顺序无关，与其他任何顺序也无关。  </p><h3 id="Array-的真相"><a href="#Array-的真相" class="headerlink" title="Array 的真相"></a>Array 的真相</h3><p>&emsp;Array 在 Javascript 中是一个对象， Array 的索引是属性名。  </p><p>&emsp;事实上， Javascript 中的 “array” 有些误导性， Javascript 中的 Array 并不像大部分其他语言的数组。  </p><ul><li>首先， Javascript 中的 Array 在内存上并不连续；  </li><li>其次， Array 的索引并不是指偏移量。  </li></ul><p>&emsp;实际上， Array 的索引也不是 Number 类型，而是 <code>String</code>类型的。我们可以正确使用如 arr[0] 的写法的原因是语言可以自动将 Number 类型的 0 转换成 String 类型的 “0″ 。  </p><p>&emsp;所以，在 Javascript 中从来就没有 Array 的索引，而只有类似 “0″ 、 “1″ 等等的属性。有趣的是，每个 Array 对象都有一个 length 的属性，导致其表现地更像其他语言的数组。但为什么在遍历 Array 对象的时候没有输出 length 这一条属性呢？那是因为 for-in 只能遍历“可枚举的属性”， length 属于不可枚举属性，实际上， Array 对象还有许多其他不可枚举的属性。  </p><p>&emsp;现在，我们再回过头来看看用 for-in 来循环数组的例子,我们修改一下前面遍历数组的例子：  </p><pre class=" language-javaScript"><code class="language-javaScript">const arr = [1, 2, 3];  arr.name = "Hello world";  let index;  for(index in arr) {    console.log("arr[" + index + "] = " + arr[index]);  }  </code></pre><p>运行结果是：  </p><pre class=" language-javaScript"><code class="language-javaScript">arr[0] = 1  arr[1] = 2  arr[2] = 3  arr[name] = Hello world  </code></pre><p>&emsp;我们看到 for-in 循环访问了我们新增的 “name” 属性，因为 for-in 遍历了对象的所有属性，而不仅仅是“索引”。  </p><p>&emsp;同时需要注意的是，此处输出的索引值，即 “0″、 “1″、 “2″不是<code>Number</code>类型的，而是<code>String</code>类型的，因为其就是作为属性输出，而不是索引。  </p><p>&emsp;那是不是说不在我们的 Array 对象中添加新的属性，我们就可以只输出数组中的内容了呢？答案是否定的。因为 for-in 不仅仅遍历 array 自身的属性，其还遍历 array 原型链上的所有可枚举的属性。下面我们看个例子：  </p><pre class=" language-javaScript"><code class="language-javaScript">Array.prototype.fatherName = "Father";  const arr = [1, 2, 3];  arr.name = "Hello world";  let index;  for(index in arr) {    console.log("arr[" + index + "] = " + arr[index]);  }  </code></pre><p>运行结果是：  </p><pre class=" language-javaScript"><code class="language-javaScript">arr[0] = 1  arr[1] = 2  arr[2] = 3  arr[name] = Hello world  arr[fatherName] = Father  </code></pre><p>&emsp; 写到这里，我们可以发现 for-in 并不适合用来遍历 Array 中的元素，其更适合遍历对象中的属性，这也是其被创造出来的初衷。却有一种情况例外，就是稀疏数组。考虑下面的例子：  </p><pre class=" language-javaScript"><code class="language-javaScript">let key;  const arr = [];  arr[0] = "a";  arr[100] = "b";  arr[10000] = "c";  for(key in arr) {    if(arr.hasOwnProperty(key)  &&      /^0$|^[1-9]\d*$/.test(key) &&      key <= 4294967294             ) {      console.log(arr[key]);    }  }  </code></pre><p>for-in 只会遍历存在的实体，上面的例子中， for-in 遍历了3次（遍历属性分别为”0″、 “100″、 “10000″的元素，普通 for 循环则会遍历 10001 次）。所以，只要处理得当， for-in 在遍历 Array 中元素也能发挥巨大作用。  </p><p>为了避免重复劳动，我们可以包装一下上面的代码：  </p><pre class=" language-javaScript"><code class="language-javaScript">function arrayHasOwnIndex(array, prop) {    return array.hasOwnProperty(prop) &&      /^0$|^[1-9]\d*$/.test(prop) &&      prop <= 4294967294; // 2^32 - 2  }  </code></pre><p>使用示例如下：  </p><pre class=" language-javaScript"><code class="language-javaScript">for (let key in arr) {    if (arrayHasOwnIndex(arr, key)) {      console.log(arr[key]);    }  }  </code></pre><h3 id="for-in-性能"><a href="#for-in-性能" class="headerlink" title="for-in 性能"></a>for-in 性能</h3><p>&emsp;正如上面所说，每次迭代操作会同时搜索实例或者原型属性， for-in 循环的每次迭代都会产生更多开销，因此要比其他循环类型慢，一般速度为其他类型循环的 1/7。因此，除非明确需要迭代一个属性数量未知的对象，否则应避免使用 for-in 循环。如果需要遍历一个数量有限的已知属性列表，使用其他循环会更快，比如下面的例子：  </p><pre class=" language-javaScript"><code class="language-javaScript">const obj = {    "prop1": "value1",    "prop2": "value2"  };  const props = ["prop1", "prop2"];  for(let i = 0; i < props.length; i++) {    console.log(obj[props[i]]);  }  </code></pre><p>上面代码中，将对象的属性都存入一个数组中，相对于 for-in 查找每一个属性，该代码只关注给定的属性，节省了循环的开销和时间。  </p><h2 id="for-of循环"><a href="#for-of循环" class="headerlink" title="for-of循环"></a>for-of循环</h2><p>&emsp;ES6 借鉴 C++、Java、C# 和 Python 语言，引入了for…of循环，作为遍历所有数据结构的统一的方法。  </p><p>&emsp;一个数据结构只要部署了Symbol.iterator属性，就被视为具有iterator接口，就可以用for…of循环遍历它的成员。也就是说，for…of循环内部调用的是数据结构的Symbol.iterator方法。  </p><p>先来看个例子：  </p><pre class=" language-javaScript"><code class="language-javaScript">const arr = ['a', 'b', 'c'];  for(let data of arr) {    console.log(data);  }  </code></pre><p>运行结果是：  </p><pre class=" language-javaScript"><code class="language-javaScript">a  b  c  </code></pre><p>&emsp;为什么要引进 for-of？  </p><p>&emsp;要回答这个问题，我们先来看看ES6之前的 3 种 for 循环有什么缺陷：  </p><ul><li>forEach： 不能 break 和 return；  </li><li>for-in 缺点更加明显，它不仅遍历数组中的元素，还会遍历自定义的属性，甚至原型链上的属性都被访问到。而且，遍历数组元素的顺序可能是随机的。  </li></ul><p>&emsp;所以，鉴于以上种种缺陷，我们需要改进原先的 for 循环。但 ES6 不会破坏你已经写好的 JS 代码。目前，成千上万的 Web 网站依赖 for-in 循环，其中一些网站甚至将其用于数组遍历。如果想通过修正 for-in 循环增加数组遍历支持会让这一切变得更加混乱，因此，标准委员会在 ES6 中增加了一种新的循环语法来解决目前的问题，即 for-of 。  </p><p>&emsp;那 for-of 到底可以干什么呢？  </p><p>&emsp;跟 forEach 相比，可以正确响应 break, continue, return。  </p><ul><li>for-of 循环不仅支持数组，还支持大多数类数组对象，例如 DOM nodelist 对象。  </li><li>for-of 循环也支持字符串遍历，它将字符串视为一系列 Unicode 字符来进行遍历。  </li><li>for-of 也支持 Map 和 Set （两者均为 ES6 中新增的类型）对象遍历。  </li></ul><p>总结一下，for-of 循环有以下几个特征：  </p><ul><li>这是最简洁、最直接的遍历数组元素的语法。  </li><li>这个方法避开了 for-in 循环的所有缺陷。  </li><li>与 forEach 不同的是，它可以正确响应 break、continue 和 return 语句。  </li><li>其不仅可以遍历数组，还可以遍历类数组对象和其他可迭代对象。  </li></ul><p>&emsp;但需要注意的是，for-of循环不支持普通对象，但如果你想迭代一个对象的属性，你可以用 for-in 循环（这也是它的本职工作）。  </p><!-- 最后要说的是，ES6 引进的另一个方式也能实现遍历数组的值，那就是 Iterator。上个例子：  const arr = ['a', 'b', 'c'];  const iter = arr[Symbol.iterator]();  iter.next() // { value: 'a', done: false }  iter.next() // { value: 'b', done: false }  iter.next() // { value: 'c', done: false }  iter.next() // { value: undefined, done: true }  不过，这个内容超出了本文的范围，而且 Iterator 要讲的也有很多，以后有时间专门写一篇文章介绍，欢迎关注。 -->  <h2 id="map-循环"><a href="#map-循环" class="headerlink" title="map()循环"></a>map()循环</h2><p>&emsp;map方法将数组的所有成员依次传入参数函数，然后把每一次的执行结果组成一个新数组返回。  </p><p>注意：是返回一个新数组，而不会改变原数组。  </p><pre class=" language-javaScript"><code class="language-javaScript">let numbers = [1, 2, 3];  numbers.map(function (n) {    return n + 1;  });  // [2, 3, 4]  numbers // [1, 2, 3]  </code></pre><p>&emsp;map方法接受一个函数作为参数。该函数调用时，map方法向它传入三个参数：当前成员、当前位置和数组本身。  </p><pre class=" language-javaScript"><code class="language-javaScript">[1, 2, 3].map(function(elem, index, arr) {    return elem * index;  });  // [0, 2, 6]  </code></pre><p>&emsp;此外，map()循环还可以接受第二个参数，用来绑定回调函数内部的this变量，将回调函数内部的this对象，指向第二个参数，间接操作这个参数（一般是数组）。  </p><pre class=" language-javaScript"><code class="language-javaScript">let arr = ['a', 'b', 'c'];  [1, 2].map(function (e) {    return this[e];  }, arr)   // ['b', 'c']  </code></pre><p>&emsp;上面代码通过map方法的第二个参数，将回调函数内部的this对象，指向arr数组。间接操作了数组arr; forEach同样具有这个功能。</p><h2 id="forEach循环"><a href="#forEach循环" class="headerlink" title="forEach循环"></a>forEach循环</h2><p>&emsp;在 ES5 中，引入了新的循环，即 forEach 循环。  </p><p>&emsp;forEach方法与map方法很相似，也是对数组的所有成员依次执行参数函数。但是，forEach方法不返回值，只用来操作数据。也就是说，如果数组遍历的目的是为了得到返回值，那么使用map方法，否则使用forEach方法。  </p><pre class=" language-javaScript"><code class="language-javaScript">const arr = [1, 2, 3];  arr.forEach((data) => {    console.log(data);  });  </code></pre><p>运行结果：  </p><pre class=" language-javaScript"><code class="language-javaScript">1  2  3  </code></pre><p>&emsp;forEach 方法为数组中含有有效值的每一项执行一次 <code>callback</code> 函数，那些已删除（使用 delete 方法等情况）或者从未赋值的项将被跳过（不包括那些值为 undefined 或 null 的项）。  </p><p> <code>callback</code> 函数会被依次传入三个参数：  </p><ul><li>数组当前项的值；  </li><li>数组当前项的索引；  </li><li>数组对象本身；  </li></ul><p>&emsp;需要注意的是，forEach 遍历的范围在第一次调用 callback 前就会确定。调用forEach 后添加到数组中的项不会被 callback 访问到。如果已经存在的值被改变，则传递给 callback 的值是 forEach 遍历到他们那一刻的值。已删除的项不会被遍历到。  </p><pre class=" language-javaScript"><code class="language-javaScript">const arr = [];  arr[0] = "a";  arr[3] = "b";  arr[10] = "c";  arr.name = "Hello world";  arr.forEach((daelta, index, array) => {    console.log(data, index, array);  });  </code></pre><p>运行结果：  </p><pre class=" language-javaScript"><code class="language-javaScript">a 0 ["a", 3: "b", 10: "c", name: "Hello world"]  b 3 ["a", 3: "b", 10: "c", name: "Hello world"]  c 10 ["a", 3: "b", 10: "c", name: "Hello world"]  </code></pre><p>&emsp;这里的<code>index</code> 是 <code>Number</code> 类型，并且也不会像 for-in 一样遍历原型链上的属性。  </p><p>&emsp;所以，使用 forEach 时，我们不需要专门地声明 index 和遍历的元素，因为这些都作为回调函数的参数。  </p><p>&emsp;另外，forEach 将会遍历数组中的所有元素，但是 ES5 定义了一些其他有用的方法，下面是一部分：  </p><ul><li>every: 循环在第一次 return false 后返回  </li><li>some: 循环在第一次 return true 后返回  </li><li>filter: 返回一个新的数组，该数组内的元素满足回调函数  </li><li>map: 将原数组中的元素处理后再返回  </li><li>reduce: 对数组中的元素依次处理，将上次处理结果作为下次处理的输入，最后得到最终结果。     </li></ul><h2 id="filter-过滤循环"><a href="#filter-过滤循环" class="headerlink" title="filter()过滤循环"></a>filter()过滤循环</h2><p>&emsp;<code>filter</code>方法用于过滤数组成员，满足条件的成员组成一个新数组返回。  </p><ul><li>它的参数是一个函数，所有数组成员依次执行该函数;  </li><li>返回结果为true的成员组成一个新数组返回;  </li><li>该方法不会改变原数组。  </li></ul><pre class=" language-javaScript"><code class="language-javaScript">[1, 2, 3, 4, 5].filter(function (elem) {     return (elem > 3);  }) // [4, 5]  // 上面代码将大于3的数组成员，作为一个新数组返回。  let arr = [0, 1, 'a', false];  arr.filter(Boolean) // [1, "a"]  </code></pre><p>filter方法的参数函数也可以接受三个参数：当前成员，当前位置和整个数组。  </p><pre class=" language-javaScript"><code class="language-javaScript">[1, 2, 3, 4, 5].filter(function (elem, index, arr) {    return index % 2 === 0;  }); // [1, 3, 5]  </code></pre><p>此外，filter方法也可以接受第二个参数，用来绑定参数函数内部的this变量。  </p><pre class=" language-javaScript"><code class="language-javaScript">let obj = { MAX: 3 }; let myFilter = function (item) {     if (item > this.MAX) return true;  };  let arr = [2, 8, 3, 4, 1, 3, 2, 9];  arr.filter(myFilter, obj) // [8, 4, 9]  </code></pre><p>&emsp;上面代码中，过滤器myFilter内部有this变量，它可以被filter方法的第二个参数obj绑定，返回大于3的成员。  </p><h2 id="some-，every-循环遍历"><a href="#some-，every-循环遍历" class="headerlink" title="some()，every()循环遍历"></a>some()，every()循环遍历</h2><p>&emsp;这两个方法类似“断言”（assert），返回一个布尔值，表示判断数组成员是否符合某种条件。  </p><ul><li>它们接受一个函数作为参数，所有数组成员依次执行该函数。  </li><li>该函数接受三个参数：当前成员、当前位置和整个数组，然后返回一个布尔值。  </li></ul><h3 id="some-统计数组是否满足某个条件"><a href="#some-统计数组是否满足某个条件" class="headerlink" title="some(),统计数组是否满足某个条件"></a>some(),统计数组是否满足某个条件</h3><p>&emsp;some方法是只要一个成员的返回值是true，则整个some方法的返回值就是true，否则返回false。  </p><pre class=" language-javaScript"><code class="language-javaScript">let arr = [1, 2, 3, 4, 5];  arr.some(function (elem, index, arr) {    return elem >= 3;  });  // true  </code></pre><h3 id="every-统计数组是否不满足某个条件"><a href="#every-统计数组是否不满足某个条件" class="headerlink" title="every(), 统计数组是否不满足某个条件"></a>every(), 统计数组是否不满足某个条件</h3><p>&emsp;而every方法则相反，所有成员的返回值都是true，整个every方法才返回true，否则返回false。  </p><p>&emsp;两相比较，some()只要有一个是true，便返回true；而every()只要有一个是false，便返回false.  </p><pre class=" language-javaScript"><code class="language-javaScript">let arr = [1, 2, 3, 4, 5];  arr.every(function (elem, index, arr) {    return elem >= 3;  });  // false  </code></pre><p>&emsp;这两个方法在实际开发中，大有可用之处。比如在判定用户是否勾选了不可操作的数据，或者是否勾选了一条可以操作的数据可以使用这两个方法遍历循环数组。  </p><h2 id="reduce-，reduceRight-方法"><a href="#reduce-，reduceRight-方法" class="headerlink" title="reduce()，reduceRight()方法"></a>reduce()，reduceRight()方法</h2><p>&emsp;reduce方法和reduceRight方法依次处理数组的每个成员，最终累计为一个值。  </p><p>&emsp;它们的差别是，reduce是从左到右处理（从第一个成员到最后一个成员），reduceRight则是从右到左（从最后一个成员到第一个成员），其他完全一样。  </p><pre class=" language-javaScript"><code class="language-javaScript">[1, 2, 3, 4, 5].reduce(function (a, b) {    console.log(a, b);    return a + b;  })  // 1 2  // 3 3  // 6 4  // 10 5  //最后结果：15  </code></pre><p>reduce方法和reduceRight方法的第一个参数都是一个函数。该函数接受以下四个参数。  </p><ul><li>累积变量，默认为数组的第一个成员  </li><li>当前变量，默认为数组的第二个成员  </li><li>当前位置（从0开始）  </li><li>原数组<br>&emsp;这四个参数之中，只有前两个是必须的，后两个则是可选的。  </li></ul><p>&emsp;如果要对累积变量指定初值，可以把它放在reduce方法和reduceRight方法的第二个参数。  </p><pre class=" language-javaScript"><code class="language-javaScript">[1, 2, 3, 4, 5].reduce(function (a, b) {    return a + b;  }, 10);  // 25  </code></pre><p>&emsp;上面的第二个参数相当于设定了默认值，处理空数组时尤其有用，可避免一些空指针异常。  </p><p>&emsp;由于这两个方法会遍历数组，所以实际上还可以用来做一些遍历相关的操作。比如，找出字符长度最长的数组成员。  </p><pre class=" language-javaScript"><code class="language-javaScript">function findLongest(entries) {    return entries.reduce(function (longest, entry) {    return entry.length > longest.length ? entry : longest;    }, '');  }  findLongest(['aaa', 'bb', 'c']) // "aaa"  </code></pre><p>&emsp;上面代码中，reduce的参数函数会将字符长度较长的那个数组成员，作为累积值。这导致遍历所有成员之后，累积值就是字符长度最长的那个成员。  </p><h2 id="Object-keys-遍历对象的属性"><a href="#Object-keys-遍历对象的属性" class="headerlink" title="Object.keys() 遍历对象的属性"></a>Object.keys() 遍历对象的属性</h2><p>&emsp;<code>Object.keys()</code>方法的参数是一个对象，返回一个数组。该数组的成员都是该对象自身的（而不是继承的）所有属性名，且只返回可枚举的属性。  </p><pre class=" language-javaScript"><code class="language-javaScript">let obj = {    p1: 123,    p2: 456  };  Object.keys(obj) // ["p1", "p2"]  </code></pre><h2 id="Object-getOwnPropertyNames-遍历对象的属性"><a href="#Object-getOwnPropertyNames-遍历对象的属性" class="headerlink" title="Object.getOwnPropertyNames() 遍历对象的属性"></a>Object.getOwnPropertyNames() 遍历对象的属性</h2><p>&emsp;<code>Object.getOwnPropertyNames()</code>方法与<code>Object.keys</code>类似，也是接受一个对象作为参数，返回一个数组，包含了该对象自身的所有属性名。但它能返回不可枚举的属性。  </p><pre class=" language-javaScript"><code class="language-javaScript">let a = ['Hello', 'World'];  Object.keys(a) // ["0", "1"]  Object.getOwnPropertyNames(a) // ["0", "1", "length"]  </code></pre><p>上面代码中，数组的<code>length</code>属性是不可枚举的属性，所以只出现在Object.getOwnPropertyNames()方法的返回结果中。  </p><p>由于 JavaScript 没有提供计算对象属性个数的方法，所以可以用这两个方法代替。  </p><pre class=" language-javaScript"><code class="language-javaScript">let obj = {    p1: 123,    p2: 456  };  Object.keys(obj).length // 2  </code></pre><h2 id="循环控制语句"><a href="#循环控制语句" class="headerlink" title="循环控制语句"></a>循环控制语句</h2><h3 id="break"><a href="#break" class="headerlink" title="break"></a>break</h3><p>&emsp;直接跳出<strong>当前</strong>的循环，从当前循环外面开始执行,忽略循环体中任何其他语句和循环条件测试。  </p><p>&emsp;它只能跳出<strong>一层</strong>循环，如果你的循环是嵌套循环，那么你需要按照你嵌套的层次，逐步使用break来跳出。  </p><pre class=" language-javaScript"><code class="language-javaScript">function myBreak() {      for(let i = 0; i < 5; i++) {          if(i == 3) {          break;          }      console.log(i);      }  }  myBreak();  </code></pre><p>输出：  </p><pre class=" language-javaScript"><code class="language-javaScript">0  1  2  </code></pre><p>注：  </p><ol><li><p>只能在循环体内和switch语句体内使用break语句。  </p></li><li><p>当break出现在循环体中的switch语句体内时，其作用只是跳出该switch语句体。  </p></li><li><p>&nbsp;当break出现在循环体中，但并不在switch语句体内时，则在执行break后，跳出本层循环体。  </p></li><li><p>在循环结构中，应用break语句使流程跳出本层循环体，从而提前结束本层循环  </p></li></ol><h3 id="continue"><a href="#continue" class="headerlink" title="continue"></a>continue</h3><p>&emsp;终止当前的一次循环过程，其不跳出循环,而是继续往下判断循环条件执行语句。  </p><p>&emsp;只能结束循环中的一次过程,但不能终止循环继续进行。  </p><pre class=" language-javaScript"><code class="language-javaScript">function myContinue() {  for(let i = 0; i < 5; i++) {  if(i == 3) {  continue;  }  console.log(i);  }  }  myContinue();  </code></pre><p>输出：  </p><pre class=" language-javaScript"><code class="language-javaScript">0  1  2  4  </code></pre><p>注：  </p><ol><li><p>continue语句的一般形式为：continue;  </p></li><li><p>其作用是结束本次循环，即跳过本次循环体中余下尚未执行的语句，接着再一次进行循环的条件判定。  </p></li><li><p>注意：执行continue语句并没有使整个循环终止。在while和do-while循环中，continue语句使得流程直接跳到循环控制条件的测试部分 ，然后决定循环是否继续进行。  </p></li><li><p>对与for循环，continue之后执行的语句，是循环变量更新语句i++；  </p></li></ol><p>5.对于while、do-while循环，continue之后执行的语句，是循环条件判断；因此，使用这两个循环时，必须将continue放到i++之后使用，否则，continue将跳过i++进入死循环。  </p><h3 id="return"><a href="#return" class="headerlink" title="return"></a>return</h3><p>从当前的方法中退出,返回到该调用的方法的语句处,继续执行。  </p><pre class=" language-javaScript"><code class="language-javaScript">function myReturn() {  for(let i = 0; i < 5; i++) {  if(i == 3) {  return i;  }  console.log(i);  }  }  let s = myReturn();  console.log("s: " + s);  </code></pre><p>输出：  </p><pre class=" language-javaScript"><code class="language-javaScript">0  1  2  s: 3  </code></pre><p>注：  </p><ol><li><p>return 从当前的方法中退出,返回到该调用的方法的语句处,继续执行  </p></li><li><p>return 返回一个值给调用该方法的语句，返回值的数据类型必须与方法的声明中的返回值的类型一致，可以使用强制类型转换来是数据类型一致  </p></li><li><p>return 当方法说明中用void声明返回类型为空时，应使用这种格式，不返回任何值。  </p></li></ol><h2 id="6、总结"><a href="#6、总结" class="headerlink" title="6、总结"></a>6、总结</h2><table><thead><tr><th align="left">循环方法</th><th align="center">语法</th><th align="center">传入参数</th><th align="left">返回值</th><th align="center">应用场景</th><th align="left">使用频率</th><th align="left">特点</th><th align="left">对空位的处理</th></tr></thead><tbody><tr><td align="left">while</td><td align="center">while (<code>循环条件</code>){<code>循环体</code>}</td><td align="center">key</td><td align="left">无</td><td align="center">通常用在循环次数不确定的时候</td><td align="left">不常用</td><td align="left">先判断，再执行</td><td align="left">不会忽略空位，标记undefined</td></tr><tr><td align="left">do-while</td><td align="center">do{<code>循环体</code>}while(<code>循环条件</code>);</td><td align="center">key</td><td align="left">无</td><td align="center">循环至少要执行一次</td><td align="left">不常用</td><td align="left">先执行，再判断，至少执行一次</td><td align="left">不会忽略空位，标记undefined</td></tr><tr><td align="left">for</td><td align="center">for(<code>声明循环变量</code>;<code>判断循环条件</code>;<code>更新循环变量</code>;){<code>循环体</code>}</td><td align="center">key</td><td align="left">无</td><td align="center">确定循环次数以及对象遍历的时候使用</td><td align="left">常用</td><td align="left">已知循环的初始和结束条件时非常有用</td><td align="left">不会忽略空位，标记undefined</td></tr><tr><td align="left">for-in</td><td align="center">for( let <code>key</code> in <code>obj</code>){<code>循环体</code>}</td><td align="center">key</td><td align="left">无</td><td align="center">遍历对象及稀疏数组</td><td align="left">常用</td><td align="left">循环会遍历一个object所有的可枚举属性。最好不要用，可能会遍历原型链上的属性</td><td align="left">会忽略空位</td></tr><tr><td align="left">for-of</td><td align="center">for(let <code>value</code> of <code>arr</code>) {<code>循环体</code>}</td><td align="center">value</td><td align="left">无</td><td align="center">遍历数组</td><td align="left">常用</td><td align="left">最简洁、最直接的遍历数组元素的语法</td><td align="left">不会忽略空位，标记undefined</td></tr><tr><td align="left">forEach</td><td align="center"><code>arr</code>.forEach((<code>data</code>, <code>index</code>, <code>array</code>) =&gt; { <code>循环体</code>})</td><td align="center">函数</td><td align="left">无</td><td align="center">为一些相同的元素，绑定事件处理器</td><td align="left">常用</td><td align="left">调用数组的每个元素，将元素传给回调函数；没有返回一个新数组&amp;没有返回值；不能正确响应 break, continue, return。</td><td align="left">会忽略空位</td></tr><tr><td align="left">map</td><td align="center"><code>arr</code>.map(function(<code>elem</code>, <code>index</code>, <code>array</code>) { return <code>elem * index;</code>})</td><td align="center">函数</td><td align="left">一个新数组</td><td align="center">在遍历出的数据需要处理的时候,如处理数据每一项，或者取到对象中某些属性并返回</td><td align="left">常用</td><td align="left">返回一个新数组，而不会改变原数组</td><td align="left">会忽略空位</td></tr><tr><td align="left">filter</td><td align="center"><code>arr</code>.filter(function (<code>elem</code>, <code>index</code>, <code>arr</code>) { return index % 2 === 0; })</td><td align="center">函数</td><td align="left">一个新数组</td><td align="center">用于过滤数组成员，满足条件的成员组成一个新数组返回；</td><td align="left">常用</td><td align="left">返回一个新数组，而不会改变原数组</td><td align="left">会忽略空位</td></tr></tbody></table><p>&emsp;循环是让计算机做重复任务的有效的方法，有些时候，如果代码写得有问题，会让程序陷入“死循环”，也就是永远循环下去。JavaScript的死循环会让浏览器无法正常显示或执行当前页面的逻辑，有的浏览器会直接挂掉，有的浏览器会在一段时间后提示你强行终止JavaScript的执行，因此，要特别注意死循环的问题。</p><p>&emsp;作为一只前端菜鸟，本篇文章旨在记录自己的学习心得，如有不足，还请多多指教，谢谢大家。  </p><p>&emsp;路漫漫其修远兮，与诸君共勉。  </p><p><strong>后记：Hello 小伙伴们，如果觉得本文还不错，记得点个赞或者给个 star，你们的赞和 star 是我编写更多更丰富文章的动力！<a href="https://github.com/danygitgit/document-library/blob/master/JavaScript-library/JavaScript/JS%E4%B9%8B%E5%A4%A7%E5%BE%AA%E7%8E%AF.md" target="_blank" rel="noopener">GitHub 地址</a></strong>  </p><blockquote><p><a rel="noopener" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank"><img alt="知识共享许可协议" style="border-width:0" src="https://user-gold-cdn.xitu.io/2018/12/23/167d9537f3e29c99?w=88&h=31&f=png&s=1888"></a><br><a xmlns:dct="http://purl.org/dc/terms/" property="dct:title"><strong>db</strong> 的文档库</a> 由 <a xmlns:cc="http://creativecommons.org/ns#" href="db" property="cc:attributionName" rel="cc:attributionURL">db</a> 采用 <a rel="noopener" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank">知识共享 署名-非商业性使用-相同方式共享 4.0 国际 许可协议</a>进行许可。<br>基于<a xmlns:dct="http://purl.org/dc/terms/" href="https://github.com/danygitgit" rel="noopener" target="_blank">https://github.com/danygitgit</a>上的作品创作。<br>本许可协议授权之外的使用权限可以从 <a xmlns:cc="http://creativecommons.org/ns#" href="https://creativecommons.org/licenses/by-nc-sa/2.5/cn/" rel="noopener" target="_blank">https://creativecommons.org/licenses/by-nc-sa/2.5/cn/</a> 处获得。  </p></blockquote>]]></content>
      
      
      <categories>
          
          <category> javaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javaScript </tag>
            
            <tag> 循环 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用正则表达式集锦</title>
      <link href="/2019/07/18/chang-yong-zheng-ze-biao-da-shi-ji-jin/"/>
      <url>/2019/07/18/chang-yong-zheng-ze-biao-da-shi-ji-jin/</url>
      
        <content type="html"><![CDATA[<p>@<a href="https://github.com/danygitgit/document-library/blob/master/other-library/%E6%AD%A3%E5%88%99/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E9%9B%86%E9%94%A6%20.md" target="_blank" rel="noopener">常用正则表达式集锦</a>  </p><blockquote><p>create by <strong>db</strong> on <strong>2019-5-13 09:45:24</strong><br>Recently revised in <strong>2019-6-21 11:30:54</strong>  </p></blockquote><p>&emsp;<strong>Hello 小伙伴们，如果觉得本文还不错，麻烦点个赞或者给个 star，你们的赞和 star 是我前进的动力！<a href="https://github.com/danygitgit/document-library/blob/master/other-library/%E6%AD%A3%E5%88%99/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E9%9B%86%E9%94%A6%20.md" target="_blank" rel="noopener">GitHub 地址</a></strong>  </p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p>I hear and I fogorget.  </p></blockquote><blockquote><p>I see and I remember.  </p></blockquote><blockquote><p>I do and I understand.  </p></blockquote><p>&emsp;作为一个前端码农，总是避免不了使用正则来检验数据或者截取字符串。然而对于这些“火星文”总是记不牢靠。因此，把工作中常用的一些正则表达式整理存档，给自己留个底，也给朋友们做个参考。</p><p>&emsp;此文档不做正则科普详解，仅供查阅。如果不是太清楚正则是啥，烦请移步参考文献。</p><p>&emsp;参考文献：</p><ul><li><p><a href="https://www.cnblogs.com/chenmeng0818/p/6370819.html" target="_blank" rel="noopener">js中的正则表达式入门 | 博客园-陈水水的个人博客</a></p></li><li><p><a href="https://juejin.im/post/5cdcd42551882568651554e6#comment" target="_blank" rel="noopener">正则表达式不要背 | 掘金-scq000</a></p></li></ul><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="正则表达式常用操作符"><a href="#正则表达式常用操作符" class="headerlink" title="正则表达式常用操作符"></a>正则表达式常用操作符</h2><table><thead><tr><th>操作符</th><th>说明</th><th>实例</th></tr></thead><tbody><tr><td>.</td><td>表示任何单个字符</td><td></td></tr><tr><td>[ ]</td><td>字符集，对单个字符给出范围</td><td><code>[abc]</code>表示 a、b、c,[a-z]表示 a-z 的单个字符</td></tr><tr><td>[^ ]</td><td>非字符集，对单个字符给出排除范围</td><td><code>[^abc]</code>表示非a或b或c的单个字符</td></tr><tr><td>_</td><td>前一个字符零次或无限次扩展</td><td><code>abc_</code>表示 ab、abc、abcc、abccc 等</td></tr><tr><td>`</td><td>`</td><td>左右表达式的任意一个</td></tr><tr><td>$</td><td>匹配字符串结尾</td><td><code>abc$</code>表示 abc 且在一个字符串结尾</td></tr><tr><td>( )</td><td>分组标记内部只能使用</td><td><code>(abc)</code>表示 abc,`(abc</td></tr><tr><td>\D</td><td>非数字</td><td></td></tr><tr><td>\d</td><td>数字，等价于0-9</td><td></td></tr><tr><td>\S</td><td>可见字符</td><td></td></tr><tr><td>\s</td><td>空白字符</td><td></td></tr><tr><td>\W</td><td>非单词字符</td><td></td></tr><tr><td>\w</td><td>单词字符，等价于[a-z0-9A-Z_]</td><td></td></tr><tr><td>^</td><td>匹配字符串开头</td><td><code>^abc</code>表示 abc 且在一个字符串的开头</td></tr><tr><td>{m,n}</td><td>扩展前一个字符 m 到 n 次</td><td><code>ab{1,2}c</code>表示 abc、abbc</td></tr><tr><td>{m}</td><td>扩展前一个字符 m 次</td><td><code>ab{2}c</code>表示 abbc</td></tr><tr><td>？</td><td>前一个字符 0 次或 1 次扩展</td><td><code>abc?</code> 表示 ab、abc</td></tr><tr><td>undefined</td><td></td><td></td></tr></tbody></table><h2 id="常用正则表达式集锦"><a href="#常用正则表达式集锦" class="headerlink" title="常用正则表达式集锦"></a>常用正则表达式集锦</h2><h3 id="一、校验数字的表达式"><a href="#一、校验数字的表达式" class="headerlink" title="一、校验数字的表达式"></a>一、校验数字的表达式</h3><p> 数字：<code>^[0-9]*$</code></p><p>n位的数字：<code>^d{n}$</code></p><p>至少n位的数字：<code>^d{n,}$</code></p><p>m-n位的数字：<code>^d{m,n}$</code></p><p>零和非零开头的数字：<code>^(0|[1-9][0-9]*)$</code></p><p>非零开头的最多带两位小数的数字：<code>^([1-9][0-9]*)+(.[0-9]{1,2})?$</code></p><p>带1-2位小数的正数或负数：<code>^(-)?d+(.d{1,2})?$</code></p><p>正数、负数、和小数：<code>^(-|+)?d+(.d+)?$</code></p><p>有两位小数的正实数：<code>^[0-9]+(.[0-9]{2})?$</code></p><p>有1~3位小数的正实数：<code>^[0-9]+(.[0-9]{1,3})?$</code></p><p>非零的正整数：<code>^[1-9]d*$</code> 或 <code>^([1-9][0-9]*){1,3}$</code> 或 <code>^+?[1-9][0-9]*$</code></p><p>非零的负整数：<code>^-[1-9][]0-9&quot;*$</code> 或 <code>^-[1-9]d*$</code></p><p>非负整数：<code>^d+$</code> 或 <code>^[1-9]d*|0$</code></p><p>非正整数：<code>^-[1-9]d*|0$</code> 或 <code>^((-d+)|(0+))$</code></p><p>非负浮点数：<code>^d+(.d+)?$</code> 或 <code>^[1-9]d*.d*|0.d*[1-9]d*|0?.0+|0$</code></p><p>非正浮点数：<code>^((-d+(.d+)?)|(0+(.0+)?))$</code> 或 <code>^(-([1-9]d*.d*|0.d*[1-9]d*))|0?.0+|0$</code></p><p>正浮点数：<code>^[1-9]d*.d*|0.d*[1-9]d*$</code> 或 <code>^(([0-9]+.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*.[0-9]+)|([0-9]*[1-9][0-9]*))$</code></p><p>负浮点数：<code>^-([1-9]d*.d*|0.d*[1-9]d*)$</code> 或 <code>^(-(([0-9]+.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*.[0-9]+)|([0-9]*[1-9][0-9]*)))$</code></p><p>浮点数：<code>^(-?d+)(.d+)?$</code> 或 <code>^-?([1-9]d*.d*|0.d*[1-9]d*|0?.0+|0)$</code></p><h3 id="二、校验字符的表达式"><a href="#二、校验字符的表达式" class="headerlink" title="二、校验字符的表达式"></a>二、校验字符的表达式</h3><p>汉字：<code>^[\u4e00-\u9fa5]+$</code></p><p>英文和数字：<code>^[A-Za-z0-9]+$</code> 或 <code>^[A-Za-z0-9]{4,40}$</code></p><p>长度为3-20的所有字符：<code>^.{3,20}$</code></p><p>由26个英文字母组成的字符串：<code>^[A-Za-z]+$</code></p><p>由26个大写英文字母组成的字符串：<code>^[A-Z]+$</code></p><p>由26个小写英文字母组成的字符串：<code>^[a-z]+$</code></p><p>由数字和26个英文字母组成的字符串：<code>^[A-Za-z0-9]+$</code></p><p>由数字、26个英文字母或者下划线组成的字符串：<code>^w+$</code> 或 <code>^w{3,20}$</code></p><h3 id="三、特殊需求表达式"><a href="#三、特殊需求表达式" class="headerlink" title="三、特殊需求表达式"></a>三、特殊需求表达式</h3><p>去掉左右空格:<br><code>str.replace(/(^\s*)|(\s*$)/g, &#39;&#39;)</code></p><p>去掉所有空格:<br><code>str.replace(/\s+/g, &#39;&#39;)</code></p><p>密码需由8位以上大写字母、小写字母、数字及特殊符号组成: <code>/^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[#?!.,@$%^&amp;*-]).{8,}$/</code></p><p>Email地址：<code>^w+([-+.]w+)*@w+([-.]w+)*.w+([-.]w+)*$</code></p><p>域名：[a-zA-Z0-9][-a-zA-Z0-9]{0,62}(/.[a-zA-Z0-9][-a-zA-Z0-9]{0,62})+/.?</p><p>InternetURL：[a-zA-z]+://[<code>^s]* 或</code>^http://([w-]+.)+[w-]+(/[w-./?%&amp;=]*)?$`</p><p>手机号码：<code>^(13[0-9]|14[5|7]|15[0|1|2|3|5|6|7|8|9]|18[0|1|2|3|5|6|7|8|9])d{8}$</code></p><p>电话号码(“XXX-XXXXXXX”、”XXXX-XXXXXXXX”、”XXX-XXXXXXX”、”XXX-XXXXXXXX”、”XXXXXXX”和”XXXXXXXX)：<code>^((d{3,4}-)|d{3.4}-)?d{7,8}$</code></p><p>国内电话号码<code>(0511-4405222、021-87888822)：d{3}-d{8}|d{4}-d{7}</code></p><p>身份证号(15位、18位数字)：<code>^d{15}|d{18}$</code></p><p>短身份证号码(数字、字母x结尾)：<code>^([0-9]){7,18}(x|X)?$</code> 或 <code>^d{8,18}|[0-9x]{8,18}|[0-9X]{8,18}?$</code></p><p>帐号是否合法(字母开头，允许5-16字节，允许字母数字下划线)：<code>^[a-zA-Z][a-zA-Z0-9_]{4,15}$</code></p><p>密码(以字母开头，长度在6~18之间，只能包含字母、数字和下划线)：<code>^[a-zA-Z]w{5,17}$</code></p><p>强密码(必须包含大小写字母和数字的组合，不能使用特殊字符，长度在8-10之间)：<code>^(?=.*d)(?=.*[a-z])(?=.*[A-Z]).{8,10}$</code></p><p>日期格式：<code>^d{4}-d{1,2}-d{1,2}</code></p><p>一年的12个月(01～09和1～12)：<code>^(0?[1-9]|1[0-2])$</code></p><p>一个月的31天(01～09和1～31)：<code>^((0?[1-9])|((1|2)[0-9])|30|31)$</code><br>xml文件：<code>^([a-zA-Z]+-?)+[a-zA-Z0-9]+\.[x|X][m|M][l|L]$</code></p><p>空白行的正则表达式：<code>s*</code> (可以用来删除空白行)</p><p>HTML标记的正则表达式：<code>&lt;(S*?)[`^&gt;]*&gt;.*?&lt;/&gt;|&lt;.*? /&gt;</code> (网上流传的版本太糟糕，上面这个也仅仅能部分，对于复杂的嵌套标记依旧无能为力)</p><p>首尾空白字符的正则表达式：<code>^s*|s*$</code>或(<code>^s*)|(s*$</code>) (可以用来删除行首行尾的空白字符(包括空格、制表符、换页符等等)，非常有用的表达式)</p><p>腾讯QQ号：<code>[1-9][0-9]{4,}</code> (腾讯QQ号从10000开始)</p><p>中国邮政编码：<code>[1-9]d{5}(?!d)</code> (中国邮政编码为6位数字)</p><p>IP地址：<code>d+.d+.d+.d+</code> (提取IP地址时有用)</p><p>IP地址：<code>((?:(?:25[0-5]|2[0-4]\d|[01]?\d?\d)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d?\d))</code></p><h3 id="钱的输入格式："><a href="#钱的输入格式：" class="headerlink" title="钱的输入格式："></a>钱的输入格式：</h3><ol><li><p>有四种钱的表示形式我们可以接受:”10000.00” 和 “10,000.00”, 和没有 “分” 的 “10000” 和 “10,000”：<code>^[1-9][0-9]*$</code></p></li><li><p>这表示任意一个不以0开头的数字,但是,这也意味着一个字符”0”不通过,所以我们采用下面的形式：<code>^(0|[1-9][0-9]*)$</code></p></li><li><p>一个0或者一个不以0开头的数字.我们还可以允许开头有一个负号：<code>^(0|-?[1-9][0-9]*)$</code></p></li><li><p>这表示一个0或者一个可能为负的开头不为0的数字.让用户以0开头好了.把负号的也去掉,因为钱总不能是负的吧.下面我们要加的是说明可能的小数部分：<code>^[0-9]+(.[0-9]+)?$</code></p></li><li><p>必须说明的是,小数点后面至少应该有1位数,所以”10.”是不通过的,但是 “10” 和 “10.2” 是通过的：<code>^[0-9]+(.[0-9]{2})?$</code></p></li><li><p>这样我们规定小数点后面必须有两位,如果你认为太苛刻了,可以这样：<code>^[0-9]+(.[0-9]{1,2})?$</code></p></li><li><p>这样就允许用户只写一位小数.下面我们该考虑数字中的逗号了,我们可以这样：<code>^[0-9]{1,3}(,[0-9]{3})*(.[0-9]{1,2})?$</code></p></li><li><p>1到3个数字,后面跟着任意个 逗号+3个数字,逗号成为可选,而不是必须：<code>^([0-9]+|[0-9]{1,3}(,[0-9]{3})*)(.[0-9]{1,2})?$</code></p></li></ol><!-- **备注：*** 这就是最终结果了,别忘了”+”可以用”*”替代如果你觉得空字符串也可以接受的话(奇怪,为什么?)最后,别忘了在用函数时去掉去掉那个反斜杠,一般的错误都在这里 --><h3 id="正则表达式的简单使用方法"><a href="#正则表达式的简单使用方法" class="headerlink" title="正则表达式的简单使用方法"></a>正则表达式的简单使用方法</h3><p>&emsp;以判断是否为中文字符为例，使用JavaScript的<code>test()</code>方法，写一个函数。</p><ul><li><code>test()</code> 方法用于检测一个字符串是否匹配某个模式.如果字符串中有匹配的值返回 true ，否则返回 false。</li></ul><pre class=" language-JavaScript"><code class="language-JavaScript">//是否含有中文（也包含日文和韩文）function isChineseChar(str){      var reg = /[\u4E00-\u9FA5\uF900-\uFA2D]/;   return reg.test(str);}isChineseChar('122') //falseisChineseChar('一二三') //true</code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>&emsp;作为一只前端菜鸟，本篇文章旨在记录自己的学习心得，如有不足，还请多多指教。其中大部分是拷贝的，如有错误，慢慢用，慢慢改。谢谢大家。  </p><p>&emsp;路漫漫其修远兮，与诸君共勉。  </p><p><strong>后记：Hello 小伙伴们，如果觉得本文还不错，记得点个赞或者给个 star，你们的赞和 star 是我编写更多更丰富文章的动力！<a href="https://github.com/danygitgit/document-library/blob/master/other-library/%E6%AD%A3%E5%88%99/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E9%9B%86%E9%94%A6%20.md" target="_blank" rel="noopener">GitHub 地址</a></strong>  </p><blockquote><p><a rel="noopener" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank"><img alt="知识共享许可协议" style="border-width:0" src="https://user-gold-cdn.xitu.io/2018/12/23/167d9537f3e29c99?w=88&h=31&f=png&s=1888"></a><br><a xmlns:dct="http://purl.org/dc/terms/" property="dct:title"><strong>db</strong> 的文档库</a> 由 <a xmlns:cc="http://creativecommons.org/ns#" href="db" property="cc:attributionName" rel="cc:attributionURL">db</a> 采用 <a rel="noopener" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank">知识共享 署名-非商业性使用-相同方式共享 4.0 国际 许可协议</a>进行许可。<br>基于<a xmlns:dct="http://purl.org/dc/terms/" href="https://github.com/danygitgit" rel="noopener" target="_blank">https://github.com/danygitgit</a>上的作品创作。<br>本许可协议授权之外的使用权限可以从 <a xmlns:cc="http://creativecommons.org/ns#" href="https://creativecommons.org/licenses/by-nc-sa/2.5/cn/" rel="noopener" target="_blank">https://creativecommons.org/licenses/by-nc-sa/2.5/cn/</a> 处获得。  </p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Regex </category>
          
      </categories>
      
      
        <tags>
            
            <tag> regex </tag>
            
            <tag> RE </tag>
            
            <tag> 正则 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Less的正确打开方式</title>
      <link href="/2019/07/17/less-de-zheng-que-da-kai-fang-shi/"/>
      <url>/2019/07/17/less-de-zheng-que-da-kai-fang-shi/</url>
      
        <content type="html"><![CDATA[<p>@<a href="https://github.com/danygitgit/document-library/blob/master/JavaScript-library/Vue/Vue%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%EF%BC%88%E4%B8%80%EF%BC%89%E2%80%94%E2%80%94ToDoList.md" target="_blank" rel="noopener">Less学习笔记</a></p><blockquote><p>create by <strong>db</strong> on <strong>2019-4-26 18:06:31</strong><br>Recently revised in <strong>2019-4-26 18:06:35</strong></p></blockquote><p>&emsp;<strong>Hello 小伙伴们，如果觉得本文还不错，麻烦点个赞或者给个 star，你们的赞和 star 是我前进的动力！<a href="https://github.com/danygitgit/document-library/blob/master/JavaScript-library/Vue/Vue%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%EF%BC%88%E4%B8%80%EF%BC%89%E2%80%94%E2%80%94ToDoList.md" target="_blank" rel="noopener">GitHub 地址</a></strong></p><p>&emsp;查阅网上诸多资料，并结合自己的学习经验，写下这篇Less学习笔记，以记录自己的学习心得。现分享给大家，以供参考。</p><p>&emsp;作为一只前端菜鸟，本篇文章旨在记录自己的学习心得，如有不足，还请多多指教，谢谢大家。</p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p>I hear and I fogorget.</p></blockquote><blockquote><p>I see and I remember.</p></blockquote><blockquote><p>I do and I understand.</p></blockquote><p>&emsp;参考文献：</p><ul><li><a href="https://segmentfault.com/a/1190000012360995#articleHeader10" target="_blank" rel="noopener">学习Less-看这篇就够了</a></li><li><a href="https://www.html.cn/doc/less/#" target="_blank" rel="noopener">Less.js中文文档</a></li></ul><h2 id="CSS短板"><a href="#CSS短板" class="headerlink" title="CSS短板"></a>CSS短板</h2><p>&emsp;&emsp;作为前端学习者的我们，或多或少都要学习一些CSS，它作为前端开发三大基石之一，时刻引领着Web的发展方向。而CSS作为一门标语言，可能给初学者的印象是简单易懂，毫无逻辑，而且选择器及样式重复率高，不像编程该有的样子。在语法更新时，每当CSS新属性的提出，又会成为浏览器的兼容性问题的绊脚石。一言以蔽之，CSS的短板不容忽视。</p><p>&emsp;&emsp;问题的诞生往往伴随着新技术的兴起，在Web飞速发展的这几年，为了让CSS富有逻辑性，更有效率，涌现出了一些神奇的预处理语言。它们让CSS彻底变成一门可以使用变量、循环、继承、自定义方法等多种特性的标记语言，逻辑性得到大大的增强。</p><h2 id="预处理语言的诞生"><a href="#预处理语言的诞生" class="headerlink" title="预处理语言的诞生"></a>预处理语言的诞生</h2><ul><li><strong>Sass</strong></li></ul><blockquote><p>Sass诞生于2007年，Ruby编写，其功能及语法都十分全面，可以说完全把CSS变成了一门编程语言，在国内外都十分受欢迎。是一门非常优秀的的预处理语言。</p></blockquote><ul><li><strong>Less</strong></li></ul><blockquote><p>Less诞生于2009年，受Sass影响创建的一个开源项目。它扩充了CSS语言，增加了诸如变量、混合、函数等功能，让CSS更易于维护、方便。</p></blockquote><ul><li><strong>Stylus</strong></li></ul><blockquote><p>Stytus诞生于2010年，来自Node.js社区，其语法功能与Sass不相伯仲，是一门十分独特的创新型语言。</p></blockquote><h2 id="预处理语言的选择"><a href="#预处理语言的选择" class="headerlink" title="预处理语言的选择"></a>预处理语言的选择</h2><p>&emsp;&emsp;这是一个十分纠结的问题。</p><p>&emsp;&emsp;在网上讨论看来，Sass 与 Stylus 相比于 Less 功能更为丰富，但对于学习成本以及适应时间 ，Less 稍胜一筹。Less 没有去掉任何 CSS 的功能，而是在现有的语法上，增添了许多额外的功能特性，所以学习 Less 是一件非常舒服的事情。</p><p>&emsp;&emsp;如果你之前没有接触过预处理语言，纠结应该学哪一个，不如先看看 下面 Less 的介绍，我相信你会爱上它的。</p><h2 id="Less的正确打开方式"><a href="#Less的正确打开方式" class="headerlink" title="Less的正确打开方式"></a>Less的正确打开方式</h2><ol><li>在页面中引用Less.js</li></ol><p>可以在<a href="https://www.css88.com/doc/less/#" target="_blank" rel="noopener">官网</a>下载或者使用<a href="//cdnjs.cloudflare.com/ajax/libs/less.js/2.7.2/less.min.js">CDN</a></p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"//cdnjs.cloudflare.com/ajax/libs/less.js/2.7.2/less.min.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><p>&emsp;&emsp;需要注意的是，link标签一定要在引入Less.js之前引入，并且link标签的的rel属性要设置为stylesheet/less</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>link rel<span class="token operator">=</span><span class="token string">"stylesheet/less"</span> herf<span class="token operator">=</span><span class="token string">"style.less"</span><span class="token operator">></span><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"//cdnjs.cloudflare.com/ajax/libs/less.js/2.7.2/less.min.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><ol start="2"><li>在命令行，使用Node包管理工具npm来安装:</li></ol><pre class=" language-javascript"><code class="language-javascript">npm install <span class="token operator">-</span>g less </code></pre><p>一旦安装完成，就可以在命令行中调用，例如:</p><pre class=" language-javascript"><code class="language-javascript">lessc styles<span class="token punctuation">.</span>less</code></pre><p>这样的话编译后的CSS将会输出到 ‘stdout’ 中，你可以选择将这个输出重定向到文件中:</p><pre class=" language-javascript"><code class="language-javascript">$ lessc styles<span class="token punctuation">.</span>less <span class="token operator">></span> styles<span class="token punctuation">.</span>css</code></pre><p>详细步骤请参考官方文档</p><ul><li>如果你在本地环境，可以使用第一种方式，非常简单；但在生产环境中，性能非常重要，最好使用第二种方式</li></ul><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><ul><li>Less的功能特性</li></ul><h2 id="变量（Variables）"><a href="#变量（Variables）" class="headerlink" title="变量（Variables）"></a>变量（Variables）</h2><p>&emsp;&emsp;我们常常在CSS中看到同一个值重复出现了了很多次，这样不仅降低效率，还使得代码难以维护。<br><br><br>&emsp;&emsp;<strong>变量</strong>通过为你提供一种在一个地方管理这些值的方法让你的代码变得更容易维护（值得一提的是，其变量是常量 ，所以只能定义一次，不能重复使用。</p><h3 id="值变量"><a href="#值变量" class="headerlink" title="值变量"></a>值变量</h3><p>以@开头定义变量，并且使用时直接键入@名称</p><pre class=" language-less"><code class="language-less"><span class="token comment" spellcheck="true">/* less */</span><span class="token comment" spellcheck="true">//定义值变量</span><span class="token variable">@color<span class="token punctuation">:</span></span> <span class="token hexcode">#999</span><span class="token punctuation">;</span> <span class="token variable">@bgColor<span class="token punctuation">:</span></span> skyblue<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//不要添加引号</span><span class="token variable">@width<span class="token punctuation">:</span></span> <span class="token number">50%</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//使用值变量</span><span class="token selector">#warp</span> <span class="token punctuation">{</span>   <span class="token property">color</span><span class="token punctuation">:</span> <span class="token variable">@color</span><span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token variable">@width</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* 生成后的CSS */</span> <span class="token selector">#wrap</span> <span class="token punctuation">{</span>  <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#999</span><span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">50%</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>在平时工作中，我们可以把变量封装到一个文件中，这样有利于代码的组织维护。</p><pre class=" language-less"><code class="language-less"><span class="token variable">@lightPrimaryColor<span class="token punctuation">:</span></span> <span class="token hexcode">#c5cae9</span><span class="token punctuation">;</span><span class="token variable">@textPrimaryColor<span class="token punctuation">:</span></span> <span class="token hexcode">#fff</span><span class="token punctuation">;</span><span class="token variable">@accentColor<span class="token punctuation">:</span></span> <span class="token function">rgb</span><span class="token punctuation">(</span><span class="token number">99</span><span class="token punctuation">,</span><span class="token number">137</span><span class="token punctuation">,</span><span class="token number">185</span><span class="token punctuation">;</span><span class="token variable">@primaryTextColor<span class="token punctuation">:</span></span> <span class="token hexcode">#646464</span><span class="token punctuation">;</span><span class="token variable">@secondaryTextColor<span class="token punctuation">:</span></span> <span class="token hexcode">#000</span><span class="token punctuation">;</span><span class="token variable">@dividerColor<span class="token punctuation">:</span></span> <span class="token hexcode">#b6b6b6</span><span class="token punctuation">;</span><span class="token variable">@borderColor<span class="token punctuation">:</span></span> <span class="token hexcode">#dadada</span><span class="token punctuation">;</span></code></pre><h3 id="选择器及属性变量"><a href="#选择器及属性变量" class="headerlink" title="选择器及属性变量"></a>选择器及属性变量</h3><p>让选择器或者属性名变成动态值</p><pre class=" language-less"><code class="language-less"><span class="token comment" spellcheck="true">/* Less */</span><span class="token comment" spellcheck="true">//定义选择器变量</span><span class="token variable">@mySelector<span class="token punctuation">:</span></span> #wrap<span class="token punctuation">;</span><span class="token variable">@Wrap<span class="token punctuation">:</span></span> wrap<span class="token punctuation">;</span><span class="token selector">@{mySelector}</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//变量名 必须使用大括号包裹</span>  <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#999</span><span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">50%</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.@{Wrap}</span><span class="token punctuation">{</span>  <span class="token property">color</span><span class="token punctuation">:</span><span class="token hexcode">#ccc</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">#@{Wrap}</span><span class="token punctuation">{</span>    <span class="token property">color</span><span class="token punctuation">:</span><span class="token hexcode">#666</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* 生成的 CSS */</span><span class="token selector">#wrap</span><span class="token punctuation">{</span>   <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#999</span><span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">50%</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.wrap</span><span class="token punctuation">{</span>  <span class="token property">color</span><span class="token punctuation">:</span><span class="token hexcode">#ccc</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">#wrap</span><span class="token punctuation">{</span>    <span class="token property">color</span><span class="token punctuation">:</span><span class="token hexcode">#666</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="url变量"><a href="#url变量" class="headerlink" title="url变量"></a>url变量</h3><p>项目结构修改时，改变其变量名就好</p><pre class=" language-less"><code class="language-less"><span class="token comment" spellcheck="true">/* Less */</span><span class="token variable">@images<span class="token punctuation">:</span></span> <span class="token string">"../img"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//需要加引号</span><span class="token selector">body</span> <span class="token punctuation">{</span>  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token url">url("@{images}/dog.png")</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//变量名 必须使用大括号包裹</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* 生成的 CSS */</span><span class="token selector">body</span> <span class="token punctuation">{</span>  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token url">url("../img/dog.png")</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="声明变量"><a href="#声明变量" class="headerlink" title="声明变量"></a>声明变量</h3><p>类似于混合方法</p><pre class=" language-less"><code class="language-less"><span class="token operator">-</span>结构：<span class="token atrule">@name<span class="token punctuation">:</span></span> <span class="token punctuation">{</span> 属性：值 <span class="token punctuation">}</span><span class="token operator">-</span>使用：<span class="token variable">@name</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><pre class=" language-less"><code class="language-less"> <span class="token comment" spellcheck="true">/* Less */</span><span class="token atrule">@background<span class="token punctuation">:</span></span> <span class="token punctuation">{</span><span class="token property">background</span><span class="token punctuation">:</span>red<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token selector">#main</span><span class="token punctuation">{</span>  <span class="token variable">@background</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token atrule">@Rules<span class="token punctuation">:</span></span><span class="token punctuation">{</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>  <span class="token property">border</span><span class="token punctuation">:</span> solid <span class="token number">1</span>px red<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token selector">#con</span><span class="token punctuation">{</span>  <span class="token variable">@Rules</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* 生成的 CSS */</span><span class="token selector">#main</span><span class="token punctuation">{</span>  <span class="token property">background</span><span class="token punctuation">:</span>red<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">#con</span><span class="token punctuation">{</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>   <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>  <span class="token property">border</span><span class="token punctuation">:</span> solid <span class="token number">1</span>px red<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="变量运算"><a href="#变量运算" class="headerlink" title="变量运算"></a>变量运算</h3><p>任何数值，颜色和变量都可以进行运算，=-*/都可以，计算一方带单位就好</p><pre class=" language-less"><code class="language-less"><span class="token comment" spellcheck="true">/* Less */</span><span class="token variable">@width<span class="token punctuation">:</span></span><span class="token number">300</span>px<span class="token punctuation">;</span><span class="token variable">@color<span class="token punctuation">:</span></span><span class="token hexcode">#222</span><span class="token punctuation">;</span><span class="token selector">#wrap</span><span class="token punctuation">{</span>  <span class="token property">width</span><span class="token punctuation">:</span><span class="token variable">@width-20</span><span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span><span class="token variable">@width-20</span><span class="token operator">*</span><span class="token number">5</span><span class="token punctuation">;</span>  <span class="token property">margin</span><span class="token punctuation">:</span><span class="token punctuation">(</span><span class="token variable">@width-20</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">5</span><span class="token punctuation">;</span>  <span class="token property">color</span><span class="token punctuation">:</span><span class="token variable">@color</span><span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span><span class="token variable">@color</span> <span class="token operator">+</span> <span class="token hexcode">#111</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* 生成的 CSS */</span><span class="token selector">#wrap</span><span class="token punctuation">{</span>  <span class="token property">width</span><span class="token punctuation">:</span><span class="token number">280</span>px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span><span class="token number">200</span>px<span class="token punctuation">;</span>  <span class="token property">margin</span><span class="token punctuation">:</span><span class="token number">1400</span>px<span class="token punctuation">;</span>  <span class="token property">color</span><span class="token punctuation">:</span><span class="token hexcode">#444</span><span class="token punctuation">;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span><span class="token hexcode">#333</span><span class="token punctuation">;</span><span class="token punctuation">}</span>   </code></pre><h3 id="变量的作用域"><a href="#变量的作用域" class="headerlink" title="变量的作用域"></a>变量的作用域</h3><p>延迟加载，块级作用域<br><br>Less 中的作用域与编程语言中的作用域概念非常相似。首先会在局部查找变量和混合，如果没找到，编译器就会在父作用域中查找，依次类推。</p><pre class=" language-less"><code class="language-less"><span class="token comment" spellcheck="true">/* Less */</span><span class="token variable">@var<span class="token punctuation">:</span></span> <span class="token variable">@a</span><span class="token punctuation">;</span><span class="token variable">@a<span class="token punctuation">:</span></span> <span class="token number">100%</span><span class="token punctuation">;</span><span class="token selector">#wrap</span> <span class="token punctuation">{</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token variable">@var</span><span class="token punctuation">;</span>  <span class="token variable">@a<span class="token punctuation">:</span></span> <span class="token number">9%</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* 生成的 CSS */</span><span class="token selector">#wrap</span> <span class="token punctuation">{</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">9%</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="嵌套（Nested）"><a href="#嵌套（Nested）" class="headerlink" title="嵌套（Nested）"></a>嵌套（Nested）</h2><p>模仿了 HTML 的结构，代码更简洁</p><pre class=" language-less"><code class="language-less"><span class="token comment" spellcheck="true">/* Less */</span><span class="token selector">#header</span> <span class="token punctuation">{</span>  <span class="token property">color</span><span class="token punctuation">:</span> black<span class="token punctuation">;</span>  <span class="token selector">.navigation</span> <span class="token punctuation">{</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">12</span>px<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector">.logo</span> <span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">300</span>px<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* 生成的 CSS */</span><span class="token selector">#header</span> <span class="token punctuation">{</span>  <span class="token property">color</span><span class="token punctuation">:</span> black<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">#header .navigation</span> <span class="token punctuation">{</span>  <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">12</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">#header .logo</span> <span class="token punctuation">{</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">300</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="amp-的妙用"><a href="#amp-的妙用" class="headerlink" title="&amp; 的妙用"></a>&amp; 的妙用</h3><p>&amp; ：代表的上一层选择器的名字，此例便是header</p><ul><li>要点：<br><code>.</code> 与 <code>#</code> 皆可作为 方法前缀。<br>方法后写不写 <code>()</code> 看个人习惯。<pre class=" language-Less"><code class="language-Less">/* Less */#header{&:after{  content:"Less is more!";}.title{  font-weight:bold;}&_content{//理解方式：直接把 & 替换成 #header  margin:20px;}}/* 生成的 CSS */#header:after{content:"Less is more!";}#header .title{ //嵌套了font-weight:bold;}#header_content{//没有嵌套！  margin:20px;}</code></pre><h2 id="混合（Mixins）"><a href="#混合（Mixins）" class="headerlink" title="混合（Mixins）"></a>混合（Mixins）</h2>混合就是一种将一系列属性从一个规则集引入(“混合”)到另一个规则集的方式。<h3 id="普通混合（无参数）"><a href="#普通混合（无参数）" class="headerlink" title="普通混合（无参数）"></a>普通混合（无参数）</h3>方法犹如 声明的集合，使用时 直接键入名称即可<pre class=" language-less"><code class="language-less"><span class="token comment" spellcheck="true">/* Less */</span><span class="token selector">.card</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 等价于 .card()</span>  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#f6f6f6</span><span class="token punctuation">;</span>  <span class="token property">-webkit-box-shadow</span><span class="token punctuation">:</span> <span class="token number">0</span> <span class="token number">1</span>px <span class="token number">2</span>px <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">151</span><span class="token punctuation">,</span> <span class="token number">151</span><span class="token punctuation">,</span> <span class="token number">151</span><span class="token punctuation">,</span> <span class="token number">.58</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token property">box-shadow</span><span class="token punctuation">:</span> <span class="token number">0</span> <span class="token number">1</span>px <span class="token number">2</span>px <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">151</span><span class="token punctuation">,</span> <span class="token number">151</span><span class="token punctuation">,</span> <span class="token number">151</span><span class="token punctuation">,</span> <span class="token number">.58</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">#wrap</span><span class="token punctuation">{</span><span class="token mixin-usage function">.card</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//等价于.card();</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* 生成的 CSS */</span><span class="token selector">#wrap</span><span class="token punctuation">{</span><span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#f6f6f6</span><span class="token punctuation">;</span><span class="token property">-webkit-box-shadow</span><span class="token punctuation">:</span> <span class="token number">0</span> <span class="token number">1</span>px <span class="token number">2</span>px <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">151</span><span class="token punctuation">,</span> <span class="token number">151</span><span class="token punctuation">,</span> <span class="token number">151</span><span class="token punctuation">,</span> <span class="token number">.58</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token property">box-shadow</span><span class="token punctuation">:</span> <span class="token number">0</span> <span class="token number">1</span>px <span class="token number">2</span>px <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">151</span><span class="token punctuation">,</span> <span class="token number">151</span><span class="token punctuation">,</span> <span class="token number">151</span><span class="token punctuation">,</span> <span class="token number">.58</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="传参混合"><a href="#传参混合" class="headerlink" title="传参混合"></a>传参混合</h3>Less 可以使用默认参数，如果 没有传参数，那么将使用默认参数。<br>@arguments 犹如 JS 中的 arguments 指代的是 全部参数。<br>传的参数中 必须带着单位。```less/* Less */.border(@a:10px,@b:50px,@c:30px,@color:#000){border:solid 1px @color;box-shadow: @arguments;//指代的是 全部参数}#main{.border(0px,5px,30px,red);//必须带着单位}#wrap{.border(0px);}#content{.border;//等价于 .border()}</li></ul><p>/* 生成的 CSS */</p><p>#main{<br>  border:solid 1px red;<br>  box-shadow:0px,5px,30px,red;<br>}</p><p>#wrap{<br>  border:solid 1px #000;<br>  box-shadow: 0px 50px 30px #000;<br>}</p><p>#content{<br>  border:solid 1px #000;<br>  box-shadow: 10px 50px 30px #000;<br>}  </p><pre><code>### 方法的匹配模式以某个参数作为匹配符，与面向对象中的多态很相似```less/* Less */.triangle(top,@width:20px,@color:#000){  border-color:transparent  transparent @color transparent ;}.triangle(right,@width:20px,@color:#000){  border-color:transparent @color transparent  transparent ;}.triangle(bottom,@width:20px,@color:#000){  border-color:@color transparent  transparent  transparent ;}.triangle(left,@width:20px,@color:#000){  border-color:transparent  transparent  transparent @color;}.triangle(@_,@width:20px,@color:#000){  border-style: solid;  border-width: @width;}#main{  .triangle(left, 50px, #999)}/* 生成的 CSS */#main{  border-color:transparent  transparent  transparent #999;  border-style: solid;  border-width: 50px;}</code></pre><ul><li><p>要点</p><pre class=" language-less"><code class="language-less"><span class="token operator">-</span> 第一个参数 `left` 要会找到方法中匹配程度最高的，如果匹配程度相同，将全部选择，并存在着样式覆盖替换。<span class="token operator">-</span> 如果匹配的参数 是变量，则将会匹配，如 `<span class="token variable">@_</span>` 。</code></pre><h3 id="方法的命名空间"><a href="#方法的命名空间" class="headerlink" title="方法的命名空间"></a>方法的命名空间</h3><p>让方法更加规范</p><pre class=" language-less"><code class="language-less"><span class="token comment" spellcheck="true">/* Less */</span><span class="token selector">#card()</span><span class="token punctuation">{</span><span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#723232</span><span class="token punctuation">;</span><span class="token selector">.d(<span class="token variable">@w</span>:300px)</span><span class="token punctuation">{</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token variable">@w</span><span class="token punctuation">;</span>  <span class="token selector">#a(<span class="token variable">@h</span>:300px)</span><span class="token punctuation">{</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token variable">@h</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//可以使用上一层传进来的方法</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token variable">@w</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token selector">#wrap</span><span class="token punctuation">{</span><span class="token mixin-usage function">#card > .d > #a</span><span class="token punctuation">(</span><span class="token number">100</span>px<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 父元素不能加 括号</span><span class="token punctuation">}</span><span class="token selector">#main</span><span class="token punctuation">{</span><span class="token mixin-usage function">#card .d</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">#con</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//不得单独使用命名空间的方法</span><span class="token comment" spellcheck="true">//.d() 如果前面没有引入命名空间 #card ，将会报错</span>#card<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 等价于 #card();</span><span class="token number">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token number">20</span>px<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//必须先引入 #card</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* 生成的 CSS */</span><span class="token selector">#wrap</span><span class="token punctuation">{</span><span class="token property">height</span><span class="token punctuation">:</span><span class="token number">100</span>px<span class="token punctuation">;</span><span class="token property">width</span><span class="token punctuation">:</span><span class="token number">300</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">#main</span><span class="token punctuation">{</span><span class="token property">width</span><span class="token punctuation">:</span><span class="token number">300</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">#con</span><span class="token punctuation">{</span><span class="token property">width</span><span class="token punctuation">:</span><span class="token number">20</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><p>要点</p><pre class=" language-less"><code class="language-less"><span class="token operator">-</span> 在 CSS 中`>` 选择器，选择的是 儿子元素，就是 必须与父元素 有直接血源的元素。<span class="token operator">-</span> 在引入命令空间时，如使用 `>` 选择器，父元素不能加 括号。<span class="token operator">-</span> 不得单独使用命名空间的方法 必须先引入命名空间，才能使用 其中方法。<span class="token operator">-</span> 子方法 可以使用上一层传进来的方法</code></pre><h3 id="方法的条件筛选"><a href="#方法的条件筛选" class="headerlink" title="方法的条件筛选"></a>方法的条件筛选</h3><p>Less 没有 if else，可是它有 when</p><pre class=" language-less"><code class="language-less"><span class="token comment" spellcheck="true">/* Less */</span><span class="token selector">#card</span><span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// and 运算符 ，相当于 与运算 &amp;&amp;，必须条件全部符合才会执行</span><span class="token selector">.border(<span class="token variable">@width</span>,<span class="token variable">@color</span>,<span class="token variable">@style</span>) when (<span class="token variable">@width</span>>100px) and(<span class="token variable">@color</span>=#999)</span><span class="token punctuation">{</span>  <span class="token property">border</span><span class="token punctuation">:</span><span class="token variable">@style</span> <span class="token variable">@color</span> <span class="token variable">@width</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// not 运算符，相当于 非运算 !，条件为 不符合才会执行</span><span class="token selector">.background(<span class="token variable">@color</span>) when not (<span class="token variable">@color</span>>=#222)</span><span class="token punctuation">{</span>  <span class="token property">background</span><span class="token punctuation">:</span><span class="token variable">@color</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// , 逗号分隔符：相当于 或运算 ||，只要有一个符合条件就会执行</span><span class="token selector">.font(<span class="token variable">@size</span>:20px) when (<span class="token variable">@size</span>>50px) , (<span class="token variable">@size</span>&lt;100px)</span><span class="token punctuation">{</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token variable">@size</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token selector">#main</span><span class="token punctuation">{</span><span class="token mixin-usage function">#card>.border</span><span class="token punctuation">(</span><span class="token number">200</span>px<span class="token punctuation">,</span><span class="token hexcode">#999</span><span class="token punctuation">,</span>solid<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token mixin-usage function">#card .background</span><span class="token punctuation">(</span><span class="token hexcode">#111</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token mixin-usage function">#card > .font</span><span class="token punctuation">(</span><span class="token number">40</span>px<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* 生成后的 CSS */</span><span class="token selector">#main</span><span class="token punctuation">{</span><span class="token property">border</span><span class="token punctuation">:</span>solid <span class="token hexcode">#999</span> <span class="token number">200</span>px<span class="token punctuation">;</span><span class="token property">background</span><span class="token punctuation">:</span><span class="token hexcode">#111</span><span class="token punctuation">;</span><span class="token property">font-size</span><span class="token punctuation">:</span><span class="token number">40</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><p>要点</p><pre class=" language-less"><code class="language-less"><span class="token operator">-</span> 比较运算有： > >= = =&lt; &lt;。<span class="token operator">-</span> = 代表的是等于<span class="token operator">-</span> 除去关键字 true 以外的值都被视为 false：</code></pre><h3 id="数量不定的参数"><a href="#数量不定的参数" class="headerlink" title="数量不定的参数"></a>数量不定的参数</h3><p>如果你希望你的方法接受数量不定的参数，你可以使用… ，犹如 ES6 的扩展运算符</p><pre class=" language-less"><code class="language-less"><span class="token comment" spellcheck="true">/* Less */</span><span class="token selector">.boxShadow(...)</span><span class="token punctuation">{</span><span class="token property">box-shadow</span><span class="token punctuation">:</span> <span class="token variable">@arguments</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.textShadow(<span class="token variable">@a</span>,...)</span><span class="token punctuation">{</span>    <span class="token property">text-shadow</span><span class="token punctuation">:</span> <span class="token variable">@arguments</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">#main</span><span class="token punctuation">{</span><span class="token mixin-usage function">.boxShadow</span><span class="token punctuation">(</span><span class="token number">1</span>px<span class="token punctuation">,</span><span class="token number">4</span>px<span class="token punctuation">,</span><span class="token number">30</span>px<span class="token punctuation">,</span>red<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token mixin-usage function">.textShadow</span><span class="token punctuation">(</span><span class="token number">1</span>px<span class="token punctuation">,</span><span class="token number">4</span>px<span class="token punctuation">,</span><span class="token number">30</span>px<span class="token punctuation">,</span>red<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li></ul><p>/* 生成后的 CSS */</p><p>#main{<br>  box-shadow: 1px 4px 30px red;<br>  text-shadow: 1px 4px 30px red;<br>}</p><pre><code>### 方法使用important！使用方法 非常简单，在方法名后 加上关键字即可。```less/* Less */.border{  border: solid 1px red;  margin: 50px;}#main{  .border() !important;}/* 生成后的 CSS */#main {  border: solid 1px red !important;  margin: 50px !important;}</code></pre><h3 id="实战技巧"><a href="#实战技巧" class="headerlink" title="实战技巧"></a>实战技巧</h3><p>下面是官网中的一个非常赞的 Demo</p><pre class=" language-less"><code class="language-less"><span class="token comment" spellcheck="true">/* Less */</span><span class="token selector">.average(<span class="token variable">@x</span>, <span class="token variable">@y</span>)</span> <span class="token punctuation">{</span>  <span class="token variable">@average<span class="token punctuation">:</span></span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token variable">@x</span> <span class="token operator">+</span> <span class="token variable">@y</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">div</span> <span class="token punctuation">{</span>  <span class="token mixin-usage function">.average</span><span class="token punctuation">(</span><span class="token number">16</span>px<span class="token punctuation">,</span> <span class="token number">50</span>px<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 调用 方法</span>  <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token variable">@average</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 使用返回值</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* 生成的 CSS */</span><span class="token selector">div</span> <span class="token punctuation">{</span>  <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">33</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>可以说 Less 是一门优雅编程语言。</p><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p>extend 是 Less 的一个伪类。它可继承 所匹配声明中的全部样式。<br><br><br><strong>特点</strong>：性能高，灵活度低，不能传参，无括号。</p><h3 id="extend-关键字的使用"><a href="#extend-关键字的使用" class="headerlink" title="extend 关键字的使用"></a>extend 关键字的使用</h3><pre class=" language-less"><code class="language-less"><span class="token comment" spellcheck="true">/* Less */</span><span class="token selector">.animation</span><span class="token punctuation">{</span>  <span class="token property">transition</span><span class="token punctuation">:</span> all <span class="token number">.3</span>s ease<span class="token operator">-</span>out<span class="token punctuation">;</span>  <span class="token selector">.hide</span><span class="token punctuation">{</span>    <span class="token property">transform</span><span class="token punctuation">:</span><span class="token function">scale</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token selector">#main</span><span class="token punctuation">{</span>    &amp;<span class="token punctuation">:</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token number">.</span>animation<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">#con</span><span class="token punctuation">{</span>  &amp;<span class="token punctuation">:</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token number">.</span>animation <span class="token number">.</span>hide<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* 生成后的 CSS */</span><span class="token selector">.animation,#main</span><span class="token punctuation">{</span>  <span class="token property">transition</span><span class="token punctuation">:</span> all <span class="token number">.3</span>s ease<span class="token operator">-</span>out<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.animation .hide , #con</span><span class="token punctuation">{</span>  <span class="token property">transform</span><span class="token punctuation">:</span><span class="token function">scale</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="减少代码的重复性"><a href="#减少代码的重复性" class="headerlink" title="减少代码的重复性"></a>减少代码的重复性</h3><p>从表面看来，extend 与 方法 最大的差别，就是 extend 是同个选择器共用同一个声明，而 方法 是使用自己的声明，这无疑 增加了代码的重复性。<br><br><br>方法示例 与上面的 extend 进行对比：</p><pre class=" language-less"><code class="language-less"><span class="token comment" spellcheck="true">/* Less */</span><span class="token selector">.Method</span><span class="token punctuation">{</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>  <span class="token selector">&amp;:after</span> <span class="token punctuation">{</span>    <span class="token property">content</span><span class="token punctuation">:</span><span class="token string">"Less is good!"</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token selector">#main</span><span class="token punctuation">{</span>  <span class="token mixin-usage function">.Method</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">#wrap</span><span class="token punctuation">{</span>  <span class="token mixin-usage function">.Method</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* 生成的 CSS */</span><span class="token selector">#main</span><span class="token punctuation">{</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>  <span class="token selector">&amp;:after</span><span class="token punctuation">{</span>    <span class="token property">content</span><span class="token punctuation">:</span><span class="token string">"Less is good!"</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token selector">#wrap</span><span class="token punctuation">{</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>  <span class="token selector">&amp;:after</span><span class="token punctuation">{</span>    <span class="token property">content</span><span class="token punctuation">:</span><span class="token string">"Less is good!"</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre><ul><li>要点<ul><li>选择器和扩展之间 是允许有空格的：pre:hover :extend(div pre).</li><li>可以有多个扩展: pre:hover:extend(div pre):extend(.bucket tr) - 注意这与 pre:hover:extend(div pre, .bucket tr)一样。<br>这是不可以的，扩展必须在最后 : pre:hover:extend(div pre).nth-child(odd)。</li><li>如果一个规则集包含多个选择器，所有选择器都可以使用extend关键字。<h2 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h2><h3 id="文件导入"><a href="#文件导入" class="headerlink" title="文件导入"></a>文件导入</h3></li></ul></li></ul><ol><li>导入less文件可省略后缀<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token string">"main"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 等价于</span><span class="token keyword">import</span> <span class="token string">"main.less"</span><span class="token punctuation">;</span></code></pre></li><li>@omport 的位置可以随意放置<pre class=" language-less"><code class="language-less"><span class="token selector">#main</span> <span class="token punctuation">{</span><span class="token property">font-size</span><span class="token punctuation">:</span><span class="token number">150</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token variable">@import</span> <span class="token string">"style"</span></code></pre><h3 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h3>Less中最强大的特性<br>使用@import (reference)导入外部文件，但不会添加 把导入的文件 编译到最终输出中，只引用。```less/* Less */@import (reference) "bootstrap.less"; </li></ol><p>#wrap:extend(.navbar all){}</p><pre><code>### once@import语句的默认行为。这表明相同的文件只会被导入一次，而随后的导入文件的重复代码都不会解析。```less@import (once) &quot;foo.less&quot;;@import (once) &quot;foo.less&quot;; // this statement will be ignored</code></pre><h3 id="multiple"><a href="#multiple" class="headerlink" title="multiple"></a>multiple</h3><p>使用@import (multiple)允许导入多个同名文件。</p><pre class=" language-less"><code class="language-less"><span class="token comment" spellcheck="true">/* Less */</span>   <span class="token comment" spellcheck="true">// file: foo.less</span><span class="token selector">.a</span> <span class="token punctuation">{</span>  <span class="token property">color</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// file: main.less</span><span class="token variable">@import</span> <span class="token punctuation">(</span>multiple<span class="token punctuation">)</span> <span class="token string">"foo.less"</span><span class="token punctuation">;</span><span class="token variable">@import</span> <span class="token punctuation">(</span>multiple<span class="token punctuation">)</span> <span class="token string">"foo.less"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* 生成后的 CSS */</span><span class="token selector">.a</span> <span class="token punctuation">{</span>  <span class="token property">color</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.a</span> <span class="token punctuation">{</span>  <span class="token property">color</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="判断类型"><a href="#判断类型" class="headerlink" title="判断类型"></a>判断类型</h3><ol><li><strong>isnumber</strong><br>判断给定的值 是否 是一个数字。<pre class=" language-less"><code class="language-less"><span class="token function">isnumber</span><span class="token punctuation">(</span><span class="token hexcode">#ff0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// false</span><span class="token function">isnumber</span><span class="token punctuation">(</span>blue<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// false</span><span class="token function">isnumber</span><span class="token punctuation">(</span><span class="token string">"string"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// false</span><span class="token function">isnumber</span><span class="token punctuation">(</span><span class="token number">1234</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// true</span><span class="token function">isnumber</span><span class="token punctuation">(</span><span class="token number">56</span>px<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// true</span><span class="token function">isnumber</span><span class="token punctuation">(</span><span class="token number">7.8%</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// true</span><span class="token function">isnumber</span><span class="token punctuation">(</span>keyword<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// false</span><span class="token function">isnumber</span><span class="token punctuation">(</span><span class="token url">url(...)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// false</span></code></pre></li><li><strong>iscolor</strong><blockquote><p>判断给定的值是否是一个颜色。</p></blockquote></li><li><strong>isurl</strong><blockquote><p>判断给定的值是否是一个 url。</p></blockquote><h3 id="颜色操作"><a href="#颜色操作" class="headerlink" title="颜色操作"></a>颜色操作</h3></li><li><strong>saturate</strong> <blockquote><p>增加一定数值的颜色饱和度。 </p></blockquote></li><li><strong>lighten</strong><blockquote><p>降低一定数值的颜色亮度。</p></blockquote></li><li><strong>darken</strong><blockquote><p>降低一定数值的颜色亮度。</p></blockquote></li><li><strong>fade</strong><blockquote><p>给颜色设定一定数值的透明度。</p></blockquote></li><li><strong>mix</strong> <blockquote><p>根据比例混合两种颜色。</p></blockquote><h3 id="数学函数"><a href="#数学函数" class="headerlink" title="数学函数"></a>数学函数</h3></li><li><strong>ceil</strong> <blockquote><p>向上取整。 </p></blockquote></li><li><strong>floor</strong> <blockquote><p>向下取整。</p></blockquote></li><li><strong>percentage</strong> <blockquote><p>将浮点数转换为百分比字符串。</p></blockquote></li><li><strong>round</strong> <blockquote><p>四舍五入。</p></blockquote></li><li><strong>abs</strong> <blockquote><p>计算数字的绝对值，原样保持单位。<br>由于文章篇幅有限，所以只能介绍一些使用效率高的函数。<br>如果你想了解更多，可以去官网的<a href="http://lesscss.cn/functions/" target="_blank" rel="noopener">函数链接</a></p></blockquote><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3></li></ol><ul><li>/* */ <blockquote><p>CSS原生注释，会被编译到CSS文件中</p></blockquote></li><li>// <blockquote><p>Less提供的注释，不会被编辑到CSS中</p></blockquote><h3 id="避免编译"><a href="#避免编译" class="headerlink" title="避免编译"></a>避免编译</h3>结构： <code>~&#39; 值 &#39;</code><pre class=" language-less"><code class="language-less"><span class="token comment" spellcheck="true">/* Less */</span><span class="token selector">#main</span><span class="token punctuation">{</span><span class="token property">width</span><span class="token punctuation">:</span>~<span class="token string">'calc(300px-30px)'</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li></ul><p>/* 生成后的 CSS */</p><p>#main{<br>  width:calc(300px-30px);<br>}</p><pre><code>### 使用JS因为 Less 是由 JS 编写，所以 Less 有一得天独厚的特性：代码中使用 Javascript 。```less/* Less */@content:`&quot;aaa&quot;.toUpperCase()`;#randomColor{  @randomColor: ~&quot;rgb(`Math.round(Math.random() * 256)`,`Math.round(Math.random() * 256)`,`Math.round(Math.random() * 256)`)&quot;;}#wrap{  width: ~&quot;`Math.round(Math.random() * 100)`px&quot;;  &amp;:after{      content:@content;  }  height: ~&quot;`window.innerHeight`px&quot;;  alert:~&quot;`alert(1)`&quot;;  #randomColor();  background-color: @randomColor;}/* 生成后的 CSS */// 弹出 1#wrap{  width: 随机值（0~100）px;  height: 743px;//由电脑而异  background: 随机颜色;}#wrap::after{  content:&quot;AAA&quot;;}</code></pre><h2 id="6、总结"><a href="#6、总结" class="headerlink" title="6、总结"></a>6、总结</h2><p>&emsp;从我学习 Web 以来，无数前辈告诉我，Web 有三大基石，JS 控制行为，HTML 控制结构，CSS 控制样式。我一直再想 为什么要分为 3 个语言？为什么不能合成一个语言？或者说 就没有更合适的吗？在这几年的 Web 发展中，页面从 MVC 到 现在的 MVVC，结构正在发生着改变，但 其根本 不过是造了一个又一个 完美的轮子。我们为什么就不能打破传统呢？让 前端的 三大基石 变成一座大山呢 ？</p><p>&emsp;请试想一下，那该是个怎样的世界。</p><p>&emsp;路漫漫其修远兮，与诸君共勉。</p><p><strong>后记：Hello 小伙伴们，如果觉得本文还不错，记得点个赞或者给个 star，你们的赞和 star 是我编写更多更丰富文章的动力！<a href="https://github.com/danygitgit/document-library/blob/master/JavaScript-library/Vue/Vue%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%EF%BC%88%E4%B8%80%EF%BC%89%E2%80%94%E2%80%94ToDoList.md" target="_blank" rel="noopener">GitHub 地址</a></strong></p><blockquote><p><a rel="noopener" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank"><img alt="知识共享许可协议" style="border-width:0" src="https://user-gold-cdn.xitu.io/2018/12/23/167d9537f3e29c99?w=88&h=31&f=png&s=1888"></a><br><a xmlns:dct="http://purl.org/dc/terms/" property="dct:title"><strong>db</strong> 的文档库</a> 由 <a xmlns:cc="http://creativecommons.org/ns#" href="db" property="cc:attributionName" rel="cc:attributionURL">db</a> 采用 <a rel="noopener" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank">知识共享 署名-非商业性使用-相同方式共享 4.0 国际 许可协议</a>进行许可。<br>基于<a xmlns:dct="http://purl.org/dc/terms/" href="https://github.com/danygitgit" rel="noopener" target="_blank">https://github.com/danygitgit</a>上的作品创作。<br>本许可协议授权之外的使用权限可以从 <a xmlns:cc="http://creativecommons.org/ns#" href="https://creativecommons.org/licenses/by-nc-sa/2.5/cn/" rel="noopener" target="_blank">https://creativecommons.org/licenses/by-nc-sa/2.5/cn/</a> 处获得。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Less </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Less </tag>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue项目实战（一）——ToDoList</title>
      <link href="/2019/07/16/vue-xiang-mu-shi-zhan-yi-todolist/"/>
      <url>/2019/07/16/vue-xiang-mu-shi-zhan-yi-todolist/</url>
      
        <content type="html"><![CDATA[<p>@<a href="https://github.com/danygitgit/document-library/blob/master/JavaScript-library/Vue/Vue%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%EF%BC%88%E4%B8%80%EF%BC%89%E2%80%94%E2%80%94ToDoList.md" target="_blank" rel="noopener">vue-cli2搭建待办事项项目</a></p><blockquote><p>create by <strong>db</strong> on <strong>2019-3-10 16:28:10</strong><br>Recently revised in <strong>2019-4-1 17:06:13</strong></p></blockquote><p>&emsp;<strong>Hello 小伙伴们，如果觉得本文还不错，麻烦点个赞或者给个 star，你们的赞和 star 是我前进的动力！<a href="https://github.com/danygitgit/document-library/blob/master/JavaScript-library/Vue/Vue%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%EF%BC%88%E4%B8%80%EF%BC%89%E2%80%94%E2%80%94ToDoList.md" target="_blank" rel="noopener">GitHub 地址</a></strong></p><p>&emsp;查阅网上诸多资料，并结合自己的学习经验，写下这篇Vue学习笔记，以记录自己的学习心得。现分享给大家，以供参考。</p><p>&emsp;作为一只前端菜鸟，本篇文章旨在记录自己的学习心得，如有不足，还请多多指教，谢谢大家。</p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p>I hear and I fogorget.</p></blockquote><blockquote><p>I see and I remember.</p></blockquote><blockquote><p>I do and I understand.</p></blockquote><p>&emsp;小白课系列告一段落，下面开始我们的实战课程吧！</p><ul><li>注：本项目基于VueCLI2框架实现搭建</li></ul><p>&emsp;参考文献：</p><ul><li><a href="https://blog.csdn.net/wu__di/article/details/54918454" target="_blank" rel="noopener">Vue之ToDoList实战 | CSDN -充电实践 </a></li><li><a href="https://segmentfault.com/a/1190000010487690#vue" target="_blank" rel="noopener">简单实现一个todo-list | FatDong1 </a></li><li><a href="https://cn.vuejs.org/v2/examples/todomvc.html" target="_blank" rel="noopener">TodoMVC Example | Vue官网</a></li></ul><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p>&emsp;如果看完了《Vue小白课》，那么对Vue项目的整体情况有了一定了解，并且搭建好了vue的环境。本篇我们就来练习一下Vue，实现ToDoList项目。</p><p>&emsp;倘若对VueCLI项目不是特别了解，请先参考：</p><ul><li><a href="https://juejin.im/post/5c3d46b76fb9a04a053fecc9" target="_blank" rel="noopener">Vue小白课（一）——CLI搭建项目（Vue2.x）</a></li><li><a href="https://juejin.im/post/5c3d65df518825258604df96" target="_blank" rel="noopener">Vue小白课（二）——项目结构解析（Vue2.x）</a></li></ul><p>以下是我们的搭建好的项目目录结构：</p><p><img src="/source/images/vue-todolist-img/%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9E%84.png" alt></p><p>&emsp;在这个ToDoList当中，涉及到知识点包括以下内容:</p><h2 id="一、创建Vue实例："><a href="#一、创建Vue实例：" class="headerlink" title="一、创建Vue实例："></a>一、创建Vue实例：</h2><p>&emsp;在 main.js 中，我们看到vue-cli默认的</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  el<span class="token punctuation">:</span> <span class="token string">'#ToDoList'</span><span class="token punctuation">,</span>  router<span class="token punctuation">,</span>  components<span class="token punctuation">:</span> <span class="token punctuation">{</span> ToDoList <span class="token punctuation">}</span><span class="token punctuation">,</span>  template<span class="token punctuation">:</span> <span class="token string">'&lt;ToDoList/>'</span><span class="token punctuation">}</span></code></pre><p>&emsp;其中，<code>el</code>是Vue实例化的选项，提供一个在页面上已存在的 DOM 元素（#ToDoList）作为 Vue 实例的挂载目标。可以是 CSS 选择器，也可以是一个 HTMLElement 实例。</p><p>&emsp;<code>router</code>是Vue的路由。vue-router是Vue.js官方的路由插件，它和vue.js是深度集成的，适合用于构建单页面应用。vue的单页面应用是基于路由和组件的，路由用于设定访问路径，并将路径和组件映射起来。传统的页面应用，是用一些超链接来实现页面切换和跳转的。在vue-router单页面应用中，则是路径之间的切换，也就是组件的切换。路由模块的本质 就是建立起url和页面之间的映射关系。</p><p>&emsp;至于我们为啥不能用a标签，这是因为用Vue做的都是单页应用，就相当于只有一个主的index.html页面，所以你写的<a></a>标签是不起作用的，你必须使用vue-router来进行管理。</p><p>&emsp;<code>components</code>，组件（Component）是 Vue.js 最强大的功能之一。组件可以扩展 HTML 元素，封装可重用的代码。在较高层面上，组件是自定义元素， Vue.js 的编译器为它添加特殊功能。在有些情况下，组件也可以是原生 HTML 元素的形式，以 js 特性扩展。</p><p>&emsp;<code>template</code>，模板,作为 Vue 实例的标识使用。模板将会替换挂载的元素。挂载元素的内容都将被忽略，除非模板的内容有分发 slot。</p><h2 id="二、配置路由"><a href="#二、配置路由" class="headerlink" title="二、配置路由"></a>二、配置路由</h2><p>&emsp;<code>/src/router</code>中的<code>index.js</code>文件是Vue项目的路由配置文件。</p><p>&emsp;要使用路由我们首先要在<code>router/index.js</code>文件中创建路由并配置路由映射。我们可以将vue-cli默认的<code>HelloWorld</code>组件改名为<code>ToDoList</code>,如下：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 引入路由模块并使用它</span><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> Router <span class="token keyword">from</span> <span class="token string">'vue-router'</span><span class="token keyword">import</span> ToDoList <span class="token keyword">from</span> <span class="token string">'@/components/ToDoList'</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Router<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 创建路由实例并配置路由映射  </span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token class-name">Router</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  routes<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>      path<span class="token punctuation">:</span> <span class="token string">'/'</span><span class="token punctuation">,</span>      name<span class="token punctuation">:</span> <span class="token string">'ToDoList'</span><span class="token punctuation">,</span>      component<span class="token punctuation">:</span> ToDoList    <span class="token punctuation">}</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h2 id="三、编写页面"><a href="#三、编写页面" class="headerlink" title="三、编写页面"></a>三、编写页面</h2><h3 id="1、创建ToDoList组件"><a href="#1、创建ToDoList组件" class="headerlink" title="1、创建ToDoList组件"></a>1、创建ToDoList组件</h3><p>&emsp;既然我们配置了ToDoList的路由，就必须创建其相对应的组件。</p><p>&emsp;我们可以将<code>/src/components</code>中的<code>HelloWorld.vue</code>文件改名为<code>ToDoList.vue</code>,并且将其<code>&lt;template&gt;</code>标签的内容删除，只需要保留一个div根组件就好。如下，我们在组件模板中新建一个<code>My ToDoList</code>的标题：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ToDoList<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>My ToDoList<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span></code></pre><h3 id="2、绑定数据"><a href="#2、绑定数据" class="headerlink" title="2、绑定数据"></a>2、绑定数据</h3><p>&emsp;Vue是一个MVVM框架，那么最基础的就是数据绑定，怎样实现数据绑定呢？</p><p>&emsp;首先来认识一下<strong>data</strong></p><blockquote><p><code>data</code>就是Vue 实例的数据对象。</p></blockquote><p>&emsp;在 ToDoList.vue 中，Vue 将会递归将 <code>data</code> 的属性转换为 getter/setter，从而让 data 的属性能够响应数据变化。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  name<span class="token punctuation">:</span> <span class="token string">'ToDoList'</span><span class="token punctuation">,</span>  data <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      title<span class="token punctuation">:</span> <span class="token string">'ToDoList'</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><p>&emsp;上面的js代码，我们在ToDoList.vue中使用data，来返回title，我们的目的是title能够展现到页面上，那么这条数据如何展现呢？</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ToDoList<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">v-text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>title<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>My ToDoList<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span></code></pre><p>&emsp;在组件模板的标题h1中，我们使用<code>v-text</code>命令绑定title，这样就会自动替换原本html文本,显示了title。</p><p><img src="/source/images/vue-todolist-img/title1.png" alt></p><p>&emsp;改变title的值，显示的内容也会立即刷新。如果title的内容包含html元素，比如</p><p><code>title: &#39;&lt;span&gt;&lt;/span&gt;this is a todo list&#39;</code></p><p>&emsp;那么使用v-text显示会是：</p><p><img src="/source/images/vue-todolist-img/title2.png" alt></p><p>而使用<code>v-html</code>命令会自动替换html元素：</p><p><img src="/source/images/vue-todolist-img/title3.png" alt></p><h3 id="3、创建并渲染列表"><a href="#3、创建并渲染列表" class="headerlink" title="3、创建并渲染列表"></a>3、创建并渲染列表</h3><p>&emsp;接下来，我们使用v-for指令来实现列表的渲染：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ToDoList<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">v-html</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>title<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span>      <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item in items<span class="token punctuation">"</span></span>      <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item.id<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 待办事项 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">v-text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item.title<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 完成按钮 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">></span></span>完成<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  name<span class="token punctuation">:</span> <span class="token string">'ToDoList'</span><span class="token punctuation">,</span>  data <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      title<span class="token punctuation">:</span> <span class="token string">'ToDoList'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//标题名称</span>      <span class="token comment" spellcheck="true">//待办事项列表</span>      items<span class="token punctuation">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>          id<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>          title<span class="token punctuation">:</span> <span class="token string">'吃饭'</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>          id<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>          title<span class="token punctuation">:</span> <span class="token string">'睡觉'</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>          id<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span>          title<span class="token punctuation">:</span> <span class="token string">'打豆豆'</span>        <span class="token punctuation">}</span>      <span class="token punctuation">]</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p><strong>注：</strong></p><p>&emsp;vue中列表循环需加:key=”唯一标识” 唯一标识可以是item里面id、index等，因为vue组件高度复用，增加Key可以标识组件的唯一性。为了更好地区别各个组件， key的作用主要是为了高效的更新虚拟DOM。详情请参考</p><p><a href="https://www.jianshu.com/p/4bd5e745ce95" target="_blank" rel="noopener">VUE中演示v-for为什么要加key</a></p><p>&emsp;在data中，我们又返回了items数组，其中每个元素包括id,title，我们将items使用v-for绑定到列表中，渲染后的结果如下：</p><p><img src="/source/images/vue-todolist-img/%E5%88%97%E8%A1%A8%E6%B8%B2%E6%9F%93.png" alt></p><h3 id="4、绑定删除事件"><a href="#4、绑定删除事件" class="headerlink" title="4、绑定删除事件"></a>4、绑定删除事件</h3><p>接下来我们使用<code>v-on</code>来为按钮绑定事件，目的是点击删除按钮的时候，将列表中相应的选项删除。</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">v-on:</span>click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>toggleFinish(recycleItem)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>完成<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span></code></pre><p>这里我们增加了<code>click</code>方法，方法名为<code>toggleFinish</code>，参数为字符串<code>item</code>。</p><ul><li>methods的使用</li></ul><p>紧接着上面定义的toggleFinish方法，vue使用methods来添加各种不同的事件：</p><pre class=" language-javascript"><code class="language-javascript">methods<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">// 点击完成按钮，删除对应事项</span>  toggleFinish <span class="token punctuation">(</span>recycleItem<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 使用map遍历</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>item<span class="token punctuation">.</span>id <span class="token operator">===</span> recycleItem<span class="token punctuation">.</span>id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 删除对应事项</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="5、使用input输入框添加新事项"><a href="#5、使用input输入框添加新事项" class="headerlink" title="5、使用input输入框添加新事项"></a>5、使用input输入框添加新事项</h3><p>&emsp;截至目前我们使用的都是现成的列表，接下来我们使用输入框来动态为列表添加条目：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>newItem<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>addNewItem<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>添加<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p>&emsp;使用指令<code>v-model</code>在表单控件或者组件上创建双向绑定，即绑定newItem，使用<code>@</code>来绑定事件监听器，点击日添加按钮会响应事件<code>addNewItem</code>。</p><p><code>addNewItem</code>同样在<code>methods</code>中编写如下：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 点击添加按钮，添加新的待办事项</span>addNewItem <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 使用push为数组添加新元素</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    id<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>id<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// id 唯一且自增</span>    title<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>newItem <span class="token comment" spellcheck="true">// todo 标题</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// id 自增</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>id<span class="token operator">++</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 清空输入框</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>newItem <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>&emsp;在data中，我们声明一个变量<code>id</code>默认为0，<code>items</code>默认为空，<code>newItem</code>也为空。输入框输入内容后，点击添加按钮items中push一条内容，其中包括id与title，然后id自增，并且最后将输入框清空。</p><h2 id="6、总结"><a href="#6、总结" class="headerlink" title="6、总结"></a>6、总结</h2><p>&emsp;通过以上几个关键的知识点，我们最终就实现了ToDoList的基本功能，效果如下：</p><p><img src="/source/images/vue-todolist-img/todolist.gif" alt></p><p>&emsp;如果喜欢，可以再加一些样式。</p><p>&emsp;大家可以在后续的学习过程中加入更多的功能，巩固自己学到的知识。</p><p>&emsp;路漫漫其修远兮，与诸君共勉。</p><p><strong>后记：Hello 小伙伴们，如果觉得本文还不错，记得点个赞或者给个 star，你们的赞和 star 是我编写更多更丰富文章的动力！<a href="https://github.com/danygitgit/document-library/blob/master/JavaScript-library/Vue/Vue%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%EF%BC%88%E4%B8%80%EF%BC%89%E2%80%94%E2%80%94ToDoList.md" target="_blank" rel="noopener">GitHub 地址</a></strong></p><blockquote><p><a rel="noopener" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank"><img alt="知识共享许可协议" style="border-width:0" src="https://user-gold-cdn.xitu.io/2018/12/23/167d9537f3e29c99?w=88&h=31&f=png&s=1888"></a><br><a xmlns:dct="http://purl.org/dc/terms/" property="dct:title"><strong>db</strong> 的文档库</a> 由 <a xmlns:cc="http://creativecommons.org/ns#" href="db" property="cc:attributionName" rel="cc:attributionURL">db</a> 采用 <a rel="noopener" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank">知识共享 署名-非商业性使用-相同方式共享 4.0 国际 许可协议</a>进行许可。<br>基于<a xmlns:dct="http://purl.org/dc/terms/" href="https://github.com/danygitgit" rel="noopener" target="_blank">https://github.com/danygitgit</a>上的作品创作。<br>本许可协议授权之外的使用权限可以从 <a xmlns:cc="http://creativecommons.org/ns#" href="https://creativecommons.org/licenses/by-nc-sa/2.5/cn/" rel="noopener" target="_blank">https://creativecommons.org/licenses/by-nc-sa/2.5/cn/</a> 处获得。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> VueCLI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue小白课（四）——项目结构解析（Vue3.x）</title>
      <link href="/2019/07/15/vue-xiao-bai-ke-si-xiang-mu-jie-gou-jie-xi-vue3.x/"/>
      <url>/2019/07/15/vue-xiao-bai-ke-si-xiang-mu-jie-gou-jie-xi-vue3.x/</url>
      
        <content type="html"><![CDATA[<p>@<a href="https://github.com/danygitgit/document-library/blob/master/JavaScript-library/Vue/Vue%E5%B0%8F%E7%99%BD%E8%AF%BE%EF%BC%88%E5%9B%9B%EF%BC%89%E2%80%94%E2%80%94%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9E%84%E8%A7%A3%E6%9E%90%EF%BC%88Vue3.x%EF%BC%89.md" target="_blank" rel="noopener">Vue项目结构解析</a></p><blockquote><p>create by <strong>db</strong> on <strong>2019-1-10 16:28:10</strong><br>Recently revised in <strong>2019-3-9 21:52:41</strong></p></blockquote><p>&emsp;<strong>Hello 小伙伴们，如果觉得本文还不错，麻烦点个赞或者给个 star，你们的赞和 star 是我前进的动力！<a href="https://github.com/danygitgit/document-library/blob/master/JavaScript-library/Vue/Vue%E5%B0%8F%E7%99%BD%E8%AF%BE%EF%BC%88%E5%9B%9B%EF%BC%89%E2%80%94%E2%80%94%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9E%84%E8%A7%A3%E6%9E%90%EF%BC%88Vue3.x%EF%BC%89.md" target="_blank" rel="noopener">GitHub 地址</a></strong></p><p>&emsp;查阅网上诸多资料，并结合自己的学习经验，写下这篇Vue3.0学习笔记，现分享给大家，以供参考。</p><p>&emsp;作为一只前端菜鸟，本篇文章旨在记录自己的学习心得，如有不足，还请多多指教，谢谢大家。</p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>&emsp;在上一篇项目搭建文章中，我们已经下载安装了node环境以及Vue-CLI3，并且已经成功构建了一个Vue-CLI3项目——见<a href="https://github.com/danygitgit/document-library/blob/master/JavaScript-library/Vue/Vue%E5%B0%8F%E7%99%BD%E8%AF%BE%EF%BC%88%E4%B8%89%EF%BC%89%E2%80%94%E2%80%94CLI%E6%90%AD%E5%BB%BA%E9%A1%B9%E7%9B%AE%EF%BC%88Vue3.x%EF%BC%89.md" target="_blank" rel="noopener">Vue小白课（三）——CLI搭建项目（Vue3.x）</a>。那么接下来，我们来梳理一下Vue-CLI3项目的结构。</p><p>&emsp;参考文献：</p><ul><li><p><a href="https://cli.vuejs.org/" target="_blank" rel="noopener">Vue3.x官方文档</a></p></li><li><p><a href="https://www.jianshu.com/p/8105d6c16d80" target="_blank" rel="noopener">利用vue-cli3快速搭建vue项目详细过程 | 简书-zhyzhyzz</a></p></li><li><p><a href="https://www.jianshu.com/p/2edcf71f7730" target="_blank" rel="noopener">vue-cli3.0项目结构 | 简书-戴眼镜的松鼠</a></p></li></ul><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p>&emsp;vue-cli3.0默认项目目录与2.0的相比，更加精简:</p><ol><li>移除的配置文件根目录下的，build和config等目录，</li><li>移除了static文件夹，新增了public文件夹，并且index.html移动到public中。</li><li>在src文件夹中新增了views文件夹，用于分类 试图组件 和 公共组件 。</li><li>大部分配置 都集成到 vue.config.js这里,在项目根目录下</li></ol><h2 id="Vue-CLI3项目结构一览"><a href="#Vue-CLI3项目结构一览" class="headerlink" title="Vue-CLI3项目结构一览"></a>Vue-CLI3项目结构一览</h2><p><img src="/source/images/vue-cli-img/vue-cli30.jpg" alt></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>&emsp;路漫漫其修远兮，与诸君共勉。</p><p><strong>后记：Hello 小伙伴们，如果觉得本文还不错，记得点个赞或者给个 star，你们的赞和 star 是我编写更多更丰富文章的动力！<a href="https://github.com/danygitgit/document-library/blob/master/JavaScript-library/Vue/Vue%E5%B0%8F%E7%99%BD%E8%AF%BE%EF%BC%88%E5%9B%9B%EF%BC%89%E2%80%94%E2%80%94%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9E%84%E8%A7%A3%E6%9E%90%EF%BC%88Vue3.x%EF%BC%89.md" target="_blank" rel="noopener">GitHub 地址</a></strong></p><blockquote><p><a rel="noopener" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank"><img alt="知识共享许可协议" style="border-width:0" src="https://user-gold-cdn.xitu.io/2018/12/23/167d9537f3e29c99?w=88&h=31&f=png&s=1888"></a><br><a xmlns:dct="http://purl.org/dc/terms/" property="dct:title"><strong>db</strong> 的文档库</a> 由 <a xmlns:cc="http://creativecommons.org/ns#" href="db" property="cc:attributionName" rel="cc:attributionURL">db</a> 采用 <a rel="noopener" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank">知识共享 署名-非商业性使用-相同方式共享 4.0 国际 许可协议</a>进行许可。<br>基于<a xmlns:dct="http://purl.org/dc/terms/" href="https://github.com/danygitgit" rel="noopener" target="_blank">https://github.com/danygitgit</a>上的作品创作。<br>本许可协议授权之外的使用权限可以从 <a xmlns:cc="http://creativecommons.org/ns#" href="https://creativecommons.org/licenses/by-nc-sa/2.5/cn/" rel="noopener" target="_blank">https://creativecommons.org/licenses/by-nc-sa/2.5/cn/</a> 处获得。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> VueCLI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue小白课（三）——CLI搭建项目（Vue3.x）</title>
      <link href="/2019/07/14/vue-xiao-bai-ke-san-cli-da-jian-xiang-mu-vue3.x/"/>
      <url>/2019/07/14/vue-xiao-bai-ke-san-cli-da-jian-xiang-mu-vue3.x/</url>
      
        <content type="html"><![CDATA[<p>@<a href="https://github.com/danygitgit/document-library/blob/master/JavaScript-library/Vue/Vue%E5%B0%8F%E7%99%BD%E8%AF%BE%EF%BC%88%E4%B8%89%EF%BC%89%E2%80%94%E2%80%94CLI%E6%90%AD%E5%BB%BA%E9%A1%B9%E7%9B%AE%EF%BC%88Vue3.X%EF%BC%89.md" target="_blank" rel="noopener">Vue-CLI3搭建项目</a></p><blockquote><p>create by <strong>db</strong> on <strong>2019-1-10 16:28:10</strong><br>Recently revised in <strong>2019-3-12 15:59:45</strong></p></blockquote><p>&emsp;<strong>Hello 小伙伴们，如果觉得本文还不错，麻烦点个赞或者给个 star，你们的赞和 star 是我前进的动力！<a href="https://github.com/danygitgit/document-library/blob/master/JavaScript-library/Vue/Vue%E5%B0%8F%E7%99%BD%E8%AF%BE%EF%BC%88%E4%B8%89%EF%BC%89%E2%80%94%E2%80%94CLI%E6%90%AD%E5%BB%BA%E9%A1%B9%E7%9B%AE%EF%BC%88Vue3.x%EF%BC%89.md" target="_blank" rel="noopener">GitHub 地址</a></strong></p><p>&emsp;查阅网上诸多资料，并结合自己的学习经验，写下这篇Vue3.0学习笔记，现分享给大家，以供参考。</p><p>&emsp;作为一只前端菜鸟，本篇文章旨在记录自己的学习心得，如有不足，还请多多指教，谢谢大家。</p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>&emsp;Vue-CLI 是 vue 官方团队推出的一款快速开发 vue 项目的构建东西，具有开箱即用并且供给简练的自定义配备等功用。包括三个组件：</p><ul><li><strong>CLI</strong>：@vue/cli 全局安装的 npm 包，提供了终端里的vue命令（如：vue create 、vue serve 、vue ui 等命令）</li><li><strong>CLI</strong> 服务：@vue/cli-service是一个开发环境依赖。构建于 webpack 和 webpack-dev-server 之上（提供 如：serve、build 和 inspect 命令）</li><li><strong>CLI 插件</strong>：给Vue 项目提供可选功能的 npm 包 （如： Babel/TypeScript 转译、ESLint 集成、unit和 e2e测试 等）</li></ul><p>&emsp;Vue-CLI 3.0 正式版于 2018年8月10号发布，大神尤雨溪表示，Vue CLI 3.0与其他的版本完全不同，它经历了重构，目的是：</p><ol><li>尽可能减少现代前端工具在配置上的烦恼，尤其是在开发者将多个工具混合使用时；</li><li>尽可能在工具链中加入最佳实践，并让其成为Vue应用程序的默认实践。</li></ol><p>&emsp;与Vue-CLI 2.0相比，Vue-CLI 3.0发生了很多变化。。。</p><p>&emsp;一言以蔽之，就是<strong>让开发更简单！</strong></p><p>&emsp;此笔记旨在帮助Vue小白了解并应用Vue3项目的命令行搭建过程，希望能帮得到大家。</p><p>&emsp;参考文献：</p><ul><li><p><a href="https://cli.vuejs.org/" target="_blank" rel="noopener">Vue3.x官方文档</a></p></li><li><p><a href="https://blog.csdn.net/xuqipeter/article/details/80452271" target="_blank" rel="noopener">vue cli 3.0快速创建项目 | CSDN-徐子玉</a></p></li><li><p><a href="https://www.jianshu.com/p/8105d6c16d80" target="_blank" rel="noopener">利用vue-cli3快速搭建vue项目详细过程 | 简书-zhyzhyzz</a></p></li></ul><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="搭建Vue-CLI3-x开发环境"><a href="#搭建Vue-CLI3-x开发环境" class="headerlink" title="搭建Vue-CLI3.x开发环境"></a>搭建Vue-CLI3.x开发环境</h2><h3 id="1、更新npm到最新版本"><a href="#1、更新npm到最新版本" class="headerlink" title="1、更新npm到最新版本"></a>1、更新npm到最新版本</h3><p>&emsp;Vue CLI 3需要 nodeJs ≥ 8.9 (官方推荐 8.11.0+，你可以使用 nvm 或 nvm-windows在同一台电脑中管理多个 Node 版本）。</p><p>&emsp;命令运行</p><blockquote><p>npm install -g npm</p></blockquote><p>&emsp;npm就自动为我们更新到最新版本</p><p>&emsp;更新完成之后，以管理员身份打开cmd管理工具，，输入 <code>node -v</code>，回车，可查看node版本号.</p><h3 id="2、安装全局Vue-CLI3-x脚手架"><a href="#2、安装全局Vue-CLI3-x脚手架" class="headerlink" title="2、安装全局Vue-CLI3.x脚手架"></a>2、安装全局Vue-CLI3.x脚手架</h3><p>&emsp;Vue-CLI是vue官方提供的一个命令行工具，可用于快速搭建大型单页应用。该工具提供开箱即用的构建工具配置，带来现代化的前端开发流程。只需一分钟即可启动带热重载、保存时静态检查以及可用于生产环境的构建配置的项目。</p><p>&emsp;首先查看我们当前vue版本号，在命令行输入</p><blockquote><p>vue -V</p></blockquote><p>&emsp;如果出现<code>2.X.X</code>，则说明我们现在安装的Vue-CLI2；</p><p>然后我们就需要更新升级了，命令行输入以下命令，回车；</p><blockquote><p>npm i -g @vue/cli</p></blockquote><p>&emsp;再次查看Vue的版本号<code>3.x.x</code>，则说明更新成功；</p><h2 id="命令行创建Vue-CLI3项目"><a href="#命令行创建Vue-CLI3项目" class="headerlink" title="命令行创建Vue-CLI3项目"></a>命令行创建Vue-CLI3项目</h2><h3 id="1、通过Vue-CLI3创建一个vue项目"><a href="#1、通过Vue-CLI3创建一个vue项目" class="headerlink" title="1、通过Vue-CLI3创建一个vue项目"></a>1、通过Vue-CLI3创建一个vue项目</h3><p>&emsp;进入你需要创建项目的文件夹，打开命令行。</p><p>输入以下命令，回车</p><blockquote><p><font color="red"> vue create</font> test</p></blockquote><p>&emsp;这里<code>test</code>指的是项目名，该命令执行后会创建一个名为<code>test</code>的目录，也就是我们所搭建的项目。</p><p>此处有两个选择：</p><ul><li><p><code>default (babel, eslint)</code>：默认套餐，提供<code>babel</code>和<code>eslint</code>支持</p></li><li><p><code>Manually select features</code>：自己去选择需要的功能，提供更多的特性选择。比如如果想要支持 <code>TypeScript</code> ，就应该选择这一项。</p></li></ul><p>&emsp;可以使用<kbd>上下方向键</kbd>来切换选项。如果只需要 <code>babel</code> 和 <code>eslint</code> 支持，那么选择第一项，就完事了，静静等待 vue 初始化项目。</p><p>&emsp;Vue-CLI3 内置支持了8个功能特性，可以多选：使用<kbd>方向键</kbd>在特性选项之间切换，使用<kbd>空格键</kbd>选中当前特性，使用<kbd> a </kbd>键切换选择所有，使用<kbd> i </kbd>键翻转选项。</p><p>对于每一项的功能，此处做个简单描述：</p><pre><code>? Check the features needed for your project: (Press &lt;space&gt; to select, &lt;a&gt; to toggle all, &lt;i&gt; to invert selection)&gt;( ) Babel                           //转码器，可以将ES6代码转为ES5代码，从而在现有环境执行。                       ( ) TypeScript// TypeScript是一个JavaScript（后缀.js）的超集（后缀.ts）包含并扩展了 JavaScript 的语法，需要被编译输出为 JavaScript在浏览器运行，目前较少人再用 ( ) Progressive Web App (PWA) Support// 渐进式Web应用程序 ( ) Router                           // vue-router（vue路由） ( ) Vuex                             // vuex（vue的状态管理模式） ( ) CSS Pre-processors               // CSS 预处理器（如：less、sass） ( ) Linter / Formatter               // 代码风格检查和格式化（如：ESlint） ( ) Unit Testing                     // 单元测试（unit tests） ( ) E2E Testing                      // e2e（end to end） 测试</code></pre><p>我选择了 <code>Router</code>，<code>Vuex</code>，<code>CSS Pre-processors</code>，<code>Linter / Formatter</code></p><p>按住<code>enter</code>进入下一步，接下来都是对之前每项选项的更详细的选择。</p><ul><li><p>css:选择SCSS/SASS</p></li><li><p>Linter / Formatter:选择prettier</p></li></ul><p>&emsp;这一步就是要选择配置文件的位置了。对于 <code>Babel</code> 、<code>PostCSS</code> 等，都可以有自己的配置文件： <code>.babelrc</code> 、 <code>.postcssrc</code> 等等，同时也可以把配置信息放在 <code>package.json</code> 里面。此处出于对编辑器（ Visual Studio Code ）的友好支持（编辑器一般默认会在项目根目录下寻找配置文件），选择把配置文件放在外面，选择 <code>In dedicated config files</code></p><p><strong>补充</strong></p><p><code>Save this as a preset for future projects?</code>:这个就是问要不要把当前的这一系列选项配置保存起来，方便下一次创建项目时复用。选择y。</p><p>选完之后， Vue-CLI 就根据前面选择的内容，开始初始化项目了。</p><p>&emsp;最后出现如下代码</p><pre><code>🎉  Successfully created project test.👉  Get started with the following commands: $ cd test $ npm run serve</code></pre><p>&emsp;说明已经初始化成功，Vue-CLI3已经将项目搭建完成。</p><h3 id="2、进入你的项目文件夹"><a href="#2、进入你的项目文件夹" class="headerlink" title="2、进入你的项目文件夹"></a>2、进入你的项目文件夹</h3><p>&emsp;项目搭建好了，现在就可以进入项目文件夹。</p><p>输入以下命令，回车进入新建的项目。</p><blockquote><p><font color="red">cd</font> test</p></blockquote><h3 id="3、通过npm在项目里安装依赖"><a href="#3、通过npm在项目里安装依赖" class="headerlink" title="3、通过npm在项目里安装依赖"></a>3、通过npm在项目里安装依赖</h3><p>&emsp;因为各个模板之间都是相互依赖的，所以现在我们要安装依赖。</p><p>输入以下命令，回车安装依赖</p><blockquote><p><font color="red">npm install</font></p></blockquote><h3 id="4、启动项目"><a href="#4、启动项目" class="headerlink" title="4、启动项目"></a>4、启动项目</h3><p>&emsp;一切环境依赖安装准备就绪，我们来测试一下自己新建的vue项目的运行情况。</p><p>输入以下命令，回车启动项目</p><blockquote><p><font color="red">npm run serve</font></p></blockquote><p>结果会弹出一个浏览器访问地址默认为<code>localhost:8080</code>，如下：</p><pre><code> App running at:  - Local:   http://localhost:8080/  - Network: http://***.***.***.***:8080/  Note that the development build is not optimized.  To create a production build, run npm run build.</code></pre><p>&emsp;在浏览器中打开<code>http://localhost:8080</code>或者Network的地址，就能看到你的项目了<br><img src="/source/images/vue-cli-img/vue-cli3.png" alt></p><h2 id="vue-ui-图形化界面创建项目"><a href="#vue-ui-图形化界面创建项目" class="headerlink" title="vue ui 图形化界面创建项目"></a>vue ui 图形化界面创建项目</h2><p>&emsp;Vue-CLI3.x给我们同样提供了图形化界面,用来管理和创建项目</p><p>命令行输入命令</p><blockquote><p>vue ui</p></blockquote><p>然后会自动打浏览器页面：<br><img src="/source/images/vue-cli-img/vue-ui.png" alt></p><p>&emsp;然后就可以按照也页面按钮一步步常见项目了。</p><h2 id="项目打包"><a href="#项目打包" class="headerlink" title="项目打包"></a>项目打包</h2><p>&emsp;在开发完项目之后，就应该打包上线了。 Vue-CLI3 也提供了打包的命令，在项目根目录下执行：</p><blockquote><p>npm run build</p></blockquote><p>&emsp;执行完之后，可以看到在项目根目录下多出了一个 <code>dist</code>目录，该目录下就是打包好的所有静态资源，直接部署到静态资源服务器就好了。</p><p>&emsp;实际上，在部署的时候要注意，假设静态服务器的域名是 <code>http://static.baidu.com</code> ，那么对应到访问 <code>&lt;项目根目录&gt;/dist/index.html</code> 的 URL 一定要是 <code>http://static.baidu.com/index.html</code> ，其他的静态资源以此类推。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>&emsp;至此，我们的Vue3.0项目就搭建完成了。万里长征第一步，加油！</p><p>&emsp;如需进一步了解关于vue项目结构的基础知识，请戳<a href="https://github.com/danygitgit/document-library/blob/master/JavaScript-library/Vue/Vue%E5%B0%8F%E7%99%BD%E8%AF%BE%EF%BC%88%E5%9B%9B%EF%BC%89%E2%80%94%E2%80%94%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9E%84%E8%A7%A3%E6%9E%90%EF%BC%88Vue3.x%EF%BC%89.md" target="_blank" rel="noopener">Vue小白课（四）——项目结构解析（Vue4.x）</a></p><p>&emsp;路漫漫其修远兮，与诸君共勉。</p><p><strong>后记：Hello 小伙伴们，如果觉得本文还不错，记得点个赞或者给个 star，你们的赞和 star 是我编写更多更丰富文章的动力！<a href="https://github.com/danygitgit/document-library/blob/master/JavaScript-library/Vue/Vue%E5%B0%8F%E7%99%BD%E8%AF%BE%EF%BC%88%E4%B8%89%EF%BC%89%E2%80%94%E2%80%94CLI%E6%90%AD%E5%BB%BA%E9%A1%B9%E7%9B%AE%EF%BC%88Vue3.x%EF%BC%89.md" target="_blank" rel="noopener">GitHub 地址</a></strong></p><blockquote><p><a rel="noopener" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank"><img alt="知识共享许可协议" style="border-width:0" src="https://user-gold-cdn.xitu.io/2018/12/23/167d9537f3e29c99?w=88&h=31&f=png&s=1888"></a><br><a xmlns:dct="http://purl.org/dc/terms/" property="dct:title"><strong>db</strong> 的文档库</a> 由 <a xmlns:cc="http://creativecommons.org/ns#" href="db" property="cc:attributionName" rel="cc:attributionURL">db</a> 采用 <a rel="noopener" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank">知识共享 署名-非商业性使用-相同方式共享 4.0 国际 许可协议</a>进行许可。<br>基于<a xmlns:dct="http://purl.org/dc/terms/" href="https://github.com/danygitgit" rel="noopener" target="_blank">https://github.com/danygitgit</a>上的作品创作。<br>本许可协议授权之外的使用权限可以从 <a xmlns:cc="http://creativecommons.org/ns#" href="https://creativecommons.org/licenses/by-nc-sa/2.5/cn/" rel="noopener" target="_blank">https://creativecommons.org/licenses/by-nc-sa/2.5/cn/</a> 处获得。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> VueCLI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue小白课（二）——项目结构解析（Vue2.x）</title>
      <link href="/2019/07/13/vue-xiao-bai-ke-er-xiang-mu-jie-gou-jie-xi-vue2.x/"/>
      <url>/2019/07/13/vue-xiao-bai-ke-er-xiang-mu-jie-gou-jie-xi-vue2.x/</url>
      
        <content type="html"><![CDATA[<p>@<a href="https://github.com/danygitgit/document-library/blob/master/JavaScript-library/Vue/Vue%E5%B0%8F%E7%99%BD%E8%AF%BE%EF%BC%88%E4%BA%8C%EF%BC%89%E2%80%94%E2%80%94%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9E%84%E8%A7%A3%E6%9E%90%EF%BC%88Vue2.x%EF%BC%89.md" target="_blank" rel="noopener">Vue项目结构解析</a></p><blockquote><p>create by <strong>db</strong> on <strong>2019-1-10 16:28:10</strong><br>Recently revised in <strong>2019-1-15 11:46:47</strong></p></blockquote><p>&emsp;<strong>Hello 小伙伴们，如果觉得本文还不错，麻烦点个赞或者给个 star，你们的赞和 star 是我前进的动力！<a href="https://github.com/danygitgit/document-library/blob/master/JavaScript-library/Vue/Vue%E5%B0%8F%E7%99%BD%E8%AF%BE%EF%BC%88%E4%BA%8C%EF%BC%89%E2%80%94%E2%80%94%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9E%84%E8%A7%A3%E6%9E%90%EF%BC%88Vue2.x%EF%BC%89.md" target="_blank" rel="noopener">GitHub 地址</a></strong></p><p>&emsp;查阅网上诸多资料，并结合自己的学习经验，写下这篇Vue学习笔记，以记录自己的学习心得。现分享给大家，以供参考。</p><p>&emsp;作为一只前端菜鸟，这是我掘金分享的第五篇文章。如有不足，还请多多指教，谢谢大家。</p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>&emsp;在上一篇项目搭建文章中，我们已经下载安装了node环境以及vue-cli，并且已经成功构建了一个vue-cli项目——见<a href="https://github.com/danygitgit/document-library/blob/master/JavaScript-library/Vue/Vue%E5%B0%8F%E7%99%BD%E8%AF%BE%EF%BC%88%E4%B8%80%EF%BC%89%E2%80%94%E2%80%94CLI%E6%90%AD%E5%BB%BA%E9%A1%B9%E7%9B%AE%EF%BC%88Vue2.x%EF%BC%89.md" target="_blank" rel="noopener">Vue小白课（一）——CLI搭建项目（Vue2.x）</a>。那么接下来，我们来梳理一下vue-cli项目的结构。</p><p>&emsp;参考文献：</p><ul><li><a href="https://segmentfault.com/a/1190000009151589" target="_blank" rel="noopener">vue-cli入门（二）——项目结构 | 思否-Reachel</a></li><li><a href="https://segmentfault.com/a/1190000010659925" target="_blank" rel="noopener">Vue-cli创建vue项目以及配置文件梳理 | 思否-AshleyLv</a></li><li><a href="https://www.toutiao.com/i6378822382726939138/?group_id=6378816803061907713&group_flags=0" target="_blank" rel="noopener">Vue系列之WebPack与Eslint | 充电实践 </a></li></ul><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="Vue项目结构一览"><a href="#Vue项目结构一览" class="headerlink" title="Vue项目结构一览"></a>Vue项目结构一览</h2><pre><code>├── build --------------------------------- 项目构建(webpack)相关配置文件，配置参数什么的，一般不用动 │   ├── build.js --------------------------webpack打包配置文件│   ├── check-versions.js ------------------------------ 检查npm,nodejs版本│   ├── dev-client.js ---------------------------------- 设置环境│   ├── dev-server.js ---------------------------------- 创建express服务器，配置中间件，启动可热重载的服务器，用于开发项目│   ├── utils.js --------------------------------------- 配置资源路径，配置css加载器│   ├── vue-loader.conf.js ----------------------------- 配置css加载器等│   ├── webpack.base.conf.js --------------------------- webpack基本配置│   ├── webpack.dev.conf.js ---------------------------- 用于开发的webpack设置│   ├── webpack.prod.conf.js --------------------------- 用于打包的webpack设置├── config ---------------------------------- 配置目录，包括端口号等。我们初学可以使用默认的。│   ├── dev.env.js -------------------------- 开发环境变量│   ├── index.js ---------------------------- 项目配置文件│   ├── prod.env.js ------------------------- 生产环境变量│   ├── test.env.js ------------------------- 测试环境变量├── node_modules ---------------------------- npm 加载的项目依赖模块├── src ------------------------------------- 我们要开发的目录，基本上要做的事情都在这个目录里。│   ├── assets ------------------------------ 静态文件，放置一些图片，如logo等│   ├── components -------------------------- 组件目录，存放组件文件，可以不用。│   ├── main.js ----------------------------- 主js│   ├── App.vue ----------------------------- 项目入口组件，我们也可以直接将组件写这里，而不使用 components 目录。│   ├── router ------------------------------ 路由├── static ---------------------------- 静态资源目录，如图片、字体等。├── .babelrc--------------------------------- babel配置文件├── .editorconfig---------------------------- 编辑器配置├── .gitignore------------------------------- 配置git可忽略的文件├── index.html ------------------------------     首页入口文件，你可以添加一些 meta 信息或统计代码啥的。├── package.json ---------------------------- node配置文件，记载着一些命令和依赖还有简要的项目描述信息 ├── .README.md------------------------------- 项目的说明文档，markdown 格式。想怎么写怎么写，不会写就参照github上star多的项目，看人家怎么写的</code></pre><h2 id="Vue实现原理"><a href="#Vue实现原理" class="headerlink" title="Vue实现原理"></a>Vue实现原理</h2><p>&emsp;在webpack的配置文件里，设置了main.js是入口文件，我们的项目默认访问index.html，这个文件里面<code>&lt;div id=&quot;app&quot;&gt;&lt;/div&gt;</code>和App.vue组件里面的容器完美的重合了，也就是把组件挂载到了index页面，然后我们只需要去建设其他组件就好了，在App组件中我们也可以引入，注册，应用其他组件，可以通过路由将其他组件渲染在App组件，这样我们就只需要去关注每个组件的功能完善。</p><p>&emsp;就是说vue的默认页面是index.html，index中的<code>&lt;div id=&quot;app&quot;&gt;&lt;/div&gt;</code>挂载了App.vue这个大组件，然后所有的其他子组件（hello.vue等）都归属在App.vue这个主组件下。</p><h2 id="主要文件详解"><a href="#主要文件详解" class="headerlink" title="主要文件详解"></a>主要文件详解</h2><h3 id="src——-项目核心文件"><a href="#src——-项目核心文件" class="headerlink" title="src——[项目核心文件]"></a>src——[项目核心文件]</h3><p>&emsp;在vue-cli的项目中，其中src文件夹是必须要掌握的，因为基本上要做的事情都在这个目录里。</p><h4 id="index-html——-主页"><a href="#index-html——-主页" class="headerlink" title="index.html——[主页]"></a>index.html——[主页]</h4><p>&emsp;index.html如其他html一样，但一般只定义一个空的根节点，在main.js里面定义的实例将挂载在根节点下，内容都通过vue组件来填充</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>vuedemo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>      <span class="token comment" spellcheck="true">&lt;!-- 定义的vue实例将挂载在#app节点下 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h4 id="App-vue——-根组件"><a href="#App-vue——-根组件" class="headerlink" title="App.vue——[根组件]"></a>App.vue——[根组件]</h4><p>&emsp;一个vue页面通常由三部分组成:模板(template)、js(script)、样式(style)</p><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 模板 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./assets/logo.png<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-view</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- script --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  name<span class="token punctuation">:</span> <span class="token string">'app'</span><span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 样式 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css"><span class="token selector"><span class="token id">#app</span> </span><span class="token punctuation">{</span>  <span class="token property">font-family</span><span class="token punctuation">:</span> <span class="token string">'Avenir'</span>, Helvetica, Arial, sans-serif<span class="token punctuation">;</span>  <span class="token property">-webkit-font-smoothing</span><span class="token punctuation">:</span> antialiased<span class="token punctuation">;</span>  <span class="token property">-moz-osx-font-smoothing</span><span class="token punctuation">:</span> grayscale<span class="token punctuation">;</span>  <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>  <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#2c3e50</span><span class="token punctuation">;</span>  <span class="token property">margin-top</span><span class="token punctuation">:</span> <span class="token number">60</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></code></pre><p>【template】</p><p>&emsp;其中模板只能包含一个父节点，也就是说顶层的div只能有一个（例如上面代码，父节点为#app的div，其没有兄弟节点）</p><p>&emsp;<code>&lt;router-view&gt;&lt;/router-view&gt;</code>是子路由视图，后面的路由页面都显示在此处</p><p>&emsp;打一个比喻吧,<code>&lt;router-view&gt;</code>类似于一个插槽，跳转某个路由时，该路由下的页面就插在这个插槽中渲染显示</p><p>【script】</p><p>&emsp;vue通常用es6来写，用<code>export default</code>导出，其下面可以包含数据data，生命周期(mounted等)，方法(methods)等，具体语法请看vue.js文档。</p><p>【style】</p><p>&emsp;样式通过style标签<style></style>包裹，默认是影响全局的，如需定义作用域只在该组件下起作用，需在标签上加scoped.</p><p><code>&lt;style scoped&gt;&lt;/style&gt;</code></p><p>&emsp;如要引入外部css文件，首先需给项目安装css-loader依赖包，打开cmd，进入项目目录，输入<code>npm install css-loader</code>,回车。</p><p>&emsp;安装完成后，就可以在style标签下import所需的css文件，例如：</p><pre class=" language-css"><code class="language-css">&lt;style>    import <span class="token string">'./assets/css/public.css'</span>&lt;/style></code></pre><h4 id="main-js——-入口文件"><a href="#main-js——-入口文件" class="headerlink" title="main.js——[入口文件]"></a>main.js——[入口文件]</h4><p>&emsp;main.js主要是引入vue框架，根组件及路由设置，并且定义vue实例，下面的<br><code>components:{App}</code>就是引入的根组件App.vue</p><p>&emsp;后期还可以引入插件，当然首先得安装插件。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/*引入vue框架*/</span><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token comment" spellcheck="true">/*引入根组件*/</span><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">'./App'</span><span class="token comment" spellcheck="true">/*引入路由设置*/</span><span class="token keyword">import</span> router <span class="token keyword">from</span> <span class="token string">'./router'</span><span class="token comment" spellcheck="true">/*关闭生产模式下给出的提示*/</span> Vue<span class="token punctuation">.</span>config<span class="token punctuation">.</span>productionTip <span class="token operator">=</span> <span class="token boolean">false</span><span class="token comment" spellcheck="true">/*定义实例*/</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>  router<span class="token punctuation">,</span>  template<span class="token punctuation">:</span> <span class="token string">'&lt;App/>'</span><span class="token punctuation">,</span>  components<span class="token punctuation">:</span> <span class="token punctuation">{</span> App <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h4 id="router——-路由配置"><a href="#router——-路由配置" class="headerlink" title="router——[路由配置]"></a>router——[路由配置]</h4><p>&emsp;vue-router是Vue.js官方的路由插件，它和vue.js是深度集成的，适合用于构建单页面应用。vue的单页面应用是基于路由和组件的，路由用于设定访问路径，并将路径和组件映射起来。</p><p>&emsp;router文件夹下，有一个index.js，即为路由配置文件。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/*引入vue框架*/</span><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token comment" spellcheck="true">/*引入路由依赖*/</span><span class="token keyword">import</span> Router <span class="token keyword">from</span> <span class="token string">'vue-router'</span><span class="token comment" spellcheck="true">/*引入页面组件，命名为Hello*/</span> <span class="token keyword">import</span> Hello <span class="token keyword">from</span> <span class="token string">'@/components/Hello'</span><span class="token comment" spellcheck="true">/*使用路由依赖*/</span> Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Router<span class="token punctuation">)</span><span class="token comment" spellcheck="true">/*定义路由*/</span> <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token class-name">Router</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  routes<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>      path<span class="token punctuation">:</span> <span class="token string">'/'</span><span class="token punctuation">,</span>      name<span class="token punctuation">:</span> <span class="token string">'Hello'</span><span class="token punctuation">,</span>      component<span class="token punctuation">:</span> Hello    <span class="token punctuation">}</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>&emsp;这里定义了路径为’/‘的路由，该路由对应的页面是Hello组件，所以当我们在浏览器url访问<a href="http://localhost:8080/#/时就渲染的Hello组件" target="_blank" rel="noopener">http://localhost:8080/#/时就渲染的Hello组件</a></p><p>&emsp;类似的，我们可以设置多个路由，‘/index’,’/list’之类的，当然首先得引入该组件，再为该组件设置路由。</p><h3 id="其他配置文件"><a href="#其他配置文件" class="headerlink" title="其他配置文件"></a>其他配置文件</h3><p>&emsp;主要包括webpack的配置，项目配置，项目依赖等等。</p><p>详情可参考以下文章：</p><ul><li><a href="https://segmentfault.com/a/1190000010659925" target="_blank" rel="noopener">Vue-cli创建vue项目以及配置文件梳理 | 思否-AshleyLv</a></li></ul><h3 id="vue-模板文件"><a href="#vue-模板文件" class="headerlink" title="vue 模板文件"></a>vue 模板文件</h3><p>这是我自己做的一个vue模板文件，符合Eslint规则</p><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!--  --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token comment" spellcheck="true">// 这里可以导入其他文件（比如：组件，工具js，第三方插件js，json文件，图片文件等等）</span><span class="token comment" spellcheck="true">// 例如：import 《组件名称》 from '《组件路径》'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// import引入的组件需要注入到对象中才能使用</span>  components<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 这里存放数据</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 监听属性 类似于data概念</span>  computed<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 监控data中的数据变化</span>  watch<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 生命周期 - 创建完成（可以访问当前this实例）</span>  <span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 生命周期 - 挂载完成（可以访问DOM元素）</span>  <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">beforeCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 生命周期 - 创建之前</span>  <span class="token function">beforeMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 生命周期 - 挂载之前</span>  <span class="token function">beforeUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 生命周期 - 更新之前</span>  <span class="token function">updated</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 生命周期 - 更新之后</span>  <span class="token function">beforeDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 生命周期 - 销毁之前</span>  <span class="token function">destroyed</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 生命周期 - 销毁完成</span>  <span class="token function">activated</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 如果页面有keep-alive缓存功能，这个函数会触发</span>  <span class="token comment" spellcheck="true">// 方法集合</span>  methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>less<span class="token punctuation">'</span></span> <span class="token attr-name">scoped</span><span class="token punctuation">></span></span><span class="token style language-css">//<span class="token atrule"><span class="token rule">@import</span> <span class="token url">url()</span><span class="token punctuation">;</span></span> 引入公共css类</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></code></pre><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>&emsp;vue-cli给创建vue项目提供了很大的便利。但是同时大量的第三方库的使用，会让打包后的js变的很大，所以还是要熟悉配置,熟悉第三方插件的使用，才可以开发更高效的开发web应用。这里把vue-cli的一些相关内容给自己做一个总结，便于以后查阅。也是希望对其他开发者有帮助。有不足之处请指正。</p><p>&emsp;路漫漫其修远兮，与诸君共勉。</p><p>&emsp;祝大家2019更上一层楼！</p><p><strong>后记：Hello 小伙伴们，如果觉得本文还不错，记得点个赞或者给个 star，你们的赞和 star 是我编写更多更丰富文章的动力！<a href="https://github.com/danygitgit/document-library/blob/master/JavaScript-library/Vue/Vue%E5%B0%8F%E7%99%BD%E8%AF%BE%EF%BC%88%E4%BA%8C%EF%BC%89%E2%80%94%E2%80%94%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9E%84%E8%A7%A3%E6%9E%90%EF%BC%88Vue2.x%EF%BC%89.md" target="_blank" rel="noopener">GitHub 地址</a></strong></p><blockquote><p><a rel="noopener" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank"><img alt="知识共享许可协议" style="border-width:0" src="https://user-gold-cdn.xitu.io/2018/12/23/167d9537f3e29c99?w=88&h=31&f=png&s=1888"></a><br><a xmlns:dct="http://purl.org/dc/terms/" property="dct:title"><strong>db</strong> 的文档库</a> 由 <a xmlns:cc="http://creativecommons.org/ns#" href="db" property="cc:attributionName" rel="cc:attributionURL">db</a> 采用 <a rel="noopener" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank">知识共享 署名-非商业性使用-相同方式共享 4.0 国际 许可协议</a>进行许可。<br>基于<a xmlns:dct="http://purl.org/dc/terms/" href="https://github.com/danygitgit" rel="noopener" target="_blank">https://github.com/danygitgit</a>上的作品创作。<br>本许可协议授权之外的使用权限可以从 <a xmlns:cc="http://creativecommons.org/ns#" href="https://creativecommons.org/licenses/by-nc-sa/2.5/cn/" rel="noopener" target="_blank">https://creativecommons.org/licenses/by-nc-sa/2.5/cn/</a> 处获得。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> VueCLI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue小白课（一）——CLI搭建项目（Vue2.x）</title>
      <link href="/2019/07/12/vue-xiao-bai-ke-yi-cli-da-jian-xiang-mu-vue2.x/"/>
      <url>/2019/07/12/vue-xiao-bai-ke-yi-cli-da-jian-xiang-mu-vue2.x/</url>
      
        <content type="html"><![CDATA[<p>@<a href="https://github.com/danygitgit/document-library/blob/master/JavaScript-library/Vue/Vue-cli%E5%85%A5%E9%97%A8%EF%BC%88%E4%B8%80%EF%BC%89%E2%80%94%E2%80%94%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA.md" target="_blank" rel="noopener">vue-cli搭建项目</a></p><blockquote><p>create by <strong>db</strong> on <strong>2019-1-10 16:28:10</strong><br>Recently revised in <strong>2019-1-14 23:19:07</strong></p></blockquote><p>&emsp;<strong>Hello 小伙伴们，如果觉得本文还不错，麻烦点个赞或者给个 star，你们的赞和 star 是我前进的动力！<a href="https://github.com/danygitgit/document-library/blob/master/JavaScript-library/Vue/vue-cli%E6%90%AD%E5%BB%BA%E9%A1%B9%E7%9B%AE.md" target="_blank" rel="noopener">GitHub 地址</a></strong></p><p>&emsp;查阅网上诸多资料，并结合自己的学习经验，写下这篇Vue2.0学习笔记，以记录自己的学习心得。现分享给大家，以供参考。</p><p>&emsp;作为一只前端菜鸟，这是我掘金分享的第四篇文章。如有不足，还请多多指教，谢谢大家。</p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>&emsp;作为一款前端框架，Vue 因其易上手，轻量级，受到广泛的应用。</p><p>&emsp;vue-cli作为Vue的脚手架工具，集成了webpack环境及主要依赖，只需要几分钟的时间就可以运行起来一个项目。对于项目的搭建、打包、维护管理等都非常方便快捷。</p><p>&emsp;此笔记旨在帮助Vue小白了解并应用Vue2.0项目搭建过程，希望能帮得到大家。</p><p>&emsp;参考文献：</p><ul><li><a href="https://segmentfault.com/a/1190000015475645" target="_blank" rel="noopener">vue-cli搭建项目 | 思否-villelee</a></li><li><a href="https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="noopener">windows下搭建vue开发环境 | 充电实践 </a></li><li><a href="https://www.jianshu.com/p/0c6678671635" target="_blank" rel="noopener">十分钟上手-搭建vue开发环境（新手教程） | 简书-祈澈菇凉</a></li><li><a href="https://segmentfault.com/a/1190000009151389" target="_blank" rel="noopener">vue-cli入门（一）——项目搭建 | 思否-Reachel</a></li></ul><p>&emsp;另：个人以为，学习vue最好的途径还是<a href="https://cn.vuejs.org/" target="_blank" rel="noopener">官方文档</a></p><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="搭建Vue开发环境"><a href="#搭建Vue开发环境" class="headerlink" title="搭建Vue开发环境"></a>搭建Vue开发环境</h2><h3 id="1、安装node"><a href="#1、安装node" class="headerlink" title="1、安装node"></a>1、安装node</h3><p>&emsp;Vue项目通常通过webpack工具来构建，而webpack命令的执行是依赖node.js的环境的，所以首先要安装node.js。node.js的官方地址为：<code>https://nodejs.org/en/download/</code>，下载相应版本<br><img src="/source/images/vue-cli-img/node.png" alt></p><p>安装好node之后，以管理员身份打开cmd管理工具，，输入 <code>node -v</code>，回车，查看node版本号，出现版本号则说明安装成功。</p><blockquote><p>node -v</p></blockquote><h3 id="2、安装淘宝npm镜像"><a href="#2、安装淘宝npm镜像" class="headerlink" title="2、安装淘宝npm镜像"></a>2、安装淘宝npm镜像</h3><p>&emsp;由于npm是国外的，使用起来比较慢，我们这里使用淘宝的cnpm镜像来安装vue.</p><p>&emsp;淘宝的cnpm命令管理工具可以代替默认的npm管理工具。</p><p>输入以下命令，回车；</p><blockquote><p>npm install -g cnpm –registry=<a href="https://registry.npm.taobao.org" target="_blank" rel="noopener">https://registry.npm.taobao.org</a></p></blockquote><h3 id="3、安装全局vue-cli脚手架"><a href="#3、安装全局vue-cli脚手架" class="headerlink" title="3、安装全局vue-cli脚手架"></a>3、安装全局vue-cli脚手架</h3><p>&emsp;vue-cli是vue官方提供的一个命令行工具，可用于快速搭建大型单页应用。该工具提供开箱即用的构建工具配置，带来现代化的前端开发流程。只需一分钟即可启动带热重载、保存时静态检查以及可用于生产环境的构建配置的项目。</p><p>&emsp;淘宝镜像安装成功之后，我们就可以安装全局vue-cli脚手架。</p><p>输入以下命令，回车；</p><blockquote><p>cnpm install –global vue-cli</p></blockquote><p>&emsp;验证是否安装成功，在命令行输入<code>vue -V</code>，出来vue的版本号，则说明安装成功；</p><h2 id="创建vue项目"><a href="#创建vue项目" class="headerlink" title="创建vue项目"></a>创建vue项目</h2><h3 id="1、通过vue-cli创建一个vue项目"><a href="#1、通过vue-cli创建一个vue项目" class="headerlink" title="1、通过vue-cli创建一个vue项目"></a>1、通过vue-cli创建一个vue项目</h3><p>&emsp;进入你需要创建在项目的文件夹，打开命令行。</p><p>输入以下命令，回车</p><blockquote><p><font color="red"> vue init webpack</font> test</p></blockquote><p>&emsp;这里test指的是项目名，该命令执行后会创建一个名为test的目录，也就是我们所搭建的项目。</p><p>接下来会要求你进行一些选项设置，其实就是初始化项目：</p><pre><code>? Project name (test)        // 项目名称，按Enter确定就好 ? Project name test? Project description (A Vue.js project)        // 项目描述，按Enter确定就好 ? Project description A Vue.js project? Author (villelee)        // 作者，按Enter确定就好 ? Author villelee? Vue build (Use arrow keys)        // 开始选项设置，按Enter确定就好 ? Vue build standalone? Install vue-router? (Y/n) Y        // 安装路由，需要的话可以选Y，不需要就选n? Install vue-router? Yes? Use ESLint to lint your code? (Y/n) Y        // 是否使用ESlint统一代码风格，编码规范，建议选Y? Use ESLint to lint your code? Yes? Pick an ESLint preset (Use arrow keys)&gt; Standard (https://github.com/standard/standard)? Pick an ESLint preset Airbnb? Set up unit tests (Y/n) n        // 是否安装单元测试? Set up unit tests No? Setup e2e tests with Nightwatch? (Y/n) n        // 是否安装e2e测试编码规范? Setup e2e tests with Nightwatch? No? Should we run `npm install` for you after the project has been created? (recom? Should we run `npm install` for you after the project has been created? (recommended) npm   vue-cli · Generated &quot;test&quot;.</code></pre><p>&emsp;最后出现如下代码</p><pre><code>To get started:  cd test  npm run dev</code></pre><p>&emsp;说明已经初始化成功，vue-cli已经将项目搭建完成。</p><h3 id="2、进入你的项目文件夹"><a href="#2、进入你的项目文件夹" class="headerlink" title="2、进入你的项目文件夹"></a>2、进入你的项目文件夹</h3><p>&emsp;项目搭建好了，现在就可以进入项目文件夹。</p><p>输入以下命令，回车进入新建的项目。</p><blockquote><p><font color="red">cd</font> test</p></blockquote><h3 id="3、通过cnpm在项目里安装依赖"><a href="#3、通过cnpm在项目里安装依赖" class="headerlink" title="3、通过cnpm在项目里安装依赖"></a>3、通过cnpm在项目里安装依赖</h3><p>&emsp;因为各个模板之间都是相互依赖的，所以现在我们要安装依赖。</p><p>输入以下命令，回车安装依赖</p><blockquote><p><font color="red">cnpm install</font></p></blockquote><h3 id="4、启动项目"><a href="#4、启动项目" class="headerlink" title="4、启动项目"></a>4、启动项目</h3><p>&emsp;一切环境依赖安装准备就绪，我们来测试一下自己新建的vue项目的运行情况。</p><p>输入以下命令，回车启动项目</p><blockquote><p><font color="red">npm run dev</font></p></blockquote><p>结果会弹出一个浏览器访问地址默认为localhost:8080，如下：</p><pre><code>$ npm run dev&gt; test@1.0.0 dev D:\ptest\test&gt; webpack-dev-server --inline --progress --config build/webpack.dev.conf.js 95% emitting DONE  Compiled successfully in 5547ms11:59:13 I  Your application is running here: http://localhost:8080</code></pre><p>&emsp;在浏览器中打开<code>http://localhost:8080</code>，就能看到你的项目了<br><img src="/source/images/vue-cli-img/vue-cli.png" alt></p><h3 id="项目打包"><a href="#项目打包" class="headerlink" title="项目打包"></a>项目打包</h3><p>运行<code>npm run build</code></p><p>运行后打包成功会在项目中生成dist文件夹</p><p>部署服务器是把文件夹中的文件丢上服务器即可</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>&emsp;至此，我们的Vue项目就搭建完成了。万里长征第一步，加油！</p><p>&emsp;如需进一步了解关于vue项目结构的基础知识，请戳<a href="https://github.com/danygitgit/document-library/blob/master/JavaScript-library/Vue/Vue%E5%B0%8F%E7%99%BD%E8%AF%BE%EF%BC%88%E4%BA%8C%EF%BC%89%E2%80%94%E2%80%94%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9E%84%E8%A7%A3%E6%9E%90%EF%BC%88Vue2.x%EF%BC%89.md" target="_blank" rel="noopener">Vue小白课（二）——项目结构解析（Vue2.x）</a></p><p>&emsp;路漫漫其修远兮，与诸君共勉。</p><p>&emsp;祝大家2019更上一层楼！</p><p><strong>后记：Hello 小伙伴们，如果觉得本文还不错，记得点个赞或者给个 star，你们的赞和 star 是我编写更多更丰富文章的动力！<a href="https://github.com/danygitgit/document-library/blob/master/JavaScript-library/Vue/Vue-cli%E5%85%A5%E9%97%A8%EF%BC%88%E4%B8%80%EF%BC%89%E2%80%94%E2%80%94%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA.md" target="_blank" rel="noopener">GitHub 地址</a></strong></p><blockquote><p><a rel="noopener" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank"><img alt="知识共享许可协议" style="border-width:0" src="https://user-gold-cdn.xitu.io/2018/12/23/167d9537f3e29c99?w=88&h=31&f=png&s=1888"></a><br><a xmlns:dct="http://purl.org/dc/terms/" property="dct:title"><strong>db</strong> 的文档库</a> 由 <a xmlns:cc="http://creativecommons.org/ns#" href="db" property="cc:attributionName" rel="cc:attributionURL">db</a> 采用 <a rel="noopener" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank">知识共享 署名-非商业性使用-相同方式共享 4.0 国际 许可协议</a>进行许可。<br>基于<a xmlns:dct="http://purl.org/dc/terms/" href="https://github.com/danygitgit" rel="noopener" target="_blank">https://github.com/danygitgit</a>上的作品创作。<br>本许可协议授权之外的使用权限可以从 <a xmlns:cc="http://creativecommons.org/ns#" href="https://creativecommons.org/licenses/by-nc-sa/2.5/cn/" rel="noopener" target="_blank">https://creativecommons.org/licenses/by-nc-sa/2.5/cn/</a> 处获得。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> VueCLI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2019/07/01/hello-world/"/>
      <url>/2019/07/01/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> Hello </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hello World </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
